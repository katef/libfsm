/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = TOK_;
	function = p_;
	type     = t_;

%persistents%

	flags     :flags;
	lex_state :lex_state;
	act_state :act_state;
	err       :err;

%maps%

%header% @{

	#include <assert.h>
	#include <limits.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <errno.h>
	#include <ctype.h>

	#include "libre/re_ast.h"
	#include "libre/re_char_class.h"

	#include <re/re.h>

	#ifndef DIALECT
	#error DIALECT required
	#endif

	#define PASTE(a, b) a ## b
	#define CAT(a, b)   PASTE(a, b)

	#define LX_PREFIX CAT(lx_, DIALECT)

	#define LX_TOKEN   CAT(LX_PREFIX, _token)
	#define LX_STATE   CAT(LX_PREFIX, _lx)
	#define LX_NEXT    CAT(LX_PREFIX, _next)
	#define LX_INIT    CAT(LX_PREFIX, _init)

	#define DIALECT_PARSE  CAT(parse_re_, DIALECT)
	#define DIALECT_CHAR_CLASS  CAT(re_char_class_, DIALECT)
	#define DIALECT_CHAR_TYPE   CAT(re_char_type_, DIALECT)

	/* XXX: get rid of this; use same %entry% for all grammars */
	#define DIALECT_ENTRY CAT(p_re__, DIALECT)

	#define TOK_CLASS__alnum  TOK_CLASS_ALNUM
	#define TOK_CLASS__alpha  TOK_CLASS_ALPHA
	#define TOK_CLASS__any    TOK_CLASS_ANY
	#define TOK_CLASS__ascii  TOK_CLASS_ASCII
	#define TOK_CLASS__blank  TOK_CLASS_BLANK
	#define TOK_CLASS__cntrl  TOK_CLASS_CNTRL
	#define TOK_CLASS__digit  TOK_CLASS_DIGIT
	#define TOK_CLASS__graph  TOK_CLASS_GRAPH
	#define TOK_CLASS__lower  TOK_CLASS_LOWER
	#define TOK_CLASS__print  TOK_CLASS_PRINT
	#define TOK_CLASS__punct  TOK_CLASS_PUNCT
	#define TOK_CLASS__space  TOK_CLASS_SPACE
	#define TOK_CLASS__spchr  TOK_CLASS_SPCHR
	#define TOK_CLASS__upper  TOK_CLASS_UPPER
	#define TOK_CLASS__word   TOK_CLASS_WORD
	#define TOK_CLASS__xdigit TOK_CLASS_XDIGIT

	#define TOK_CLASS__nspace  TOK_CLASS_NSPACE
	#define TOK_CLASS__ndigit  TOK_CLASS_NDIGIT

	/* This is a hack to work around the AST files not being able to include lexer.h. */
	#define AST_POS_OF_LX_POS(AST_POS, LX_POS)			\
		do {							\
			AST_POS.line = LX_POS.line;			\
			AST_POS.col = LX_POS.col;			\
			AST_POS.byte = LX_POS.byte;			\
		} while (0)


	#include "parser.h"
	#include "lexer.h"

	#include "../comp.h"
	#include "../../class.h"
	#include "../../re_char_class.h"

	struct flags {
		enum re_flags flags;
		struct flags *parent;
	};

	typedef char     t_char;
	typedef unsigned t_unsigned;
	typedef unsigned t_pred; /* TODO */

	typedef struct lx_pos t_pos;
	typedef enum re_flags t_re__flags;
	typedef char_class_constructor_fun * t_ast__char__class__id;
	typedef struct ast_count t_ast__count;

	typedef struct re_char_class_ast * t_char__class__ast;
	typedef struct ast_char_class * t_char__class;
	typedef enum re_char_class_flags t_char__class__flags;

	typedef struct ast_range_endpoint t_range__endpoint;

	struct act_state {
		enum LX_TOKEN lex_tok;
		enum LX_TOKEN lex_tok_save;
		int overlap; /* permit overlap in groups */

		/*
		 * Lexical position stored for syntax errors.
		 */
		struct re_pos synstart;
		struct re_pos synend;

		/*
		 * Lexical positions stored for errors which describe multiple tokens.
		 * We're able to store these without needing a stack, because these are
		 * non-recursive productions.
		 */
		struct re_pos groupstart; struct re_pos groupend;
		struct re_pos rangestart; struct re_pos rangeend;
		struct re_pos countstart; struct re_pos countend;
	};

	struct lex_state {
		struct LX_STATE lx;
		struct lx_dynbuf buf; /* XXX: unneccessary since we're lexing from a string */

		re_getchar_fun *f;
		void *opaque;

		/* TODO: use lx's generated conveniences for the pattern buffer */
		char a[512];
		char *p;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   @$ERROR
	#define ADVANCE_LEXER    do { mark(&act_state->synstart, &lex_state->lx.start); \
	                              mark(&act_state->synend,   &lex_state->lx.end);   \
	                              act_state->lex_tok = LX_NEXT(&lex_state->lx); \
		} while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	static void
	mark(struct re_pos *r, const struct lx_pos *pos)
	{
		assert(r != NULL);
		assert(pos != NULL);

		r->byte = pos->byte;
	}

	/* TODO: centralise perhaps */
	static void
	snprintdots(char *s, size_t sz, const char *msg)
	{
		size_t n;

		assert(s != NULL);
		assert(sz > 3);
		assert(msg != NULL);

		n = sprintf(s, "%.*s", (int) sz - 3 - 1, msg);
		if (n == sz - 3 - 1) {
			strcpy(s + sz, "...");
		}
	}

	/* TODO: centralise */
	/* XXX: escaping really depends on dialect */
	static const char *
	escchar(char *s, size_t sz, int c)
	{
		size_t i;

		const struct {
			int c;
			const char *s;
		} a[] = {
			{ '\\', "\\\\" },

			{ '^',  "\\^"  },
			{ '-',  "\\-"  },
			{ ']',  "\\]"  },
			{ '[',  "\\["  },

			{ '\f', "\\f"  },
			{ '\n', "\\n"  },
			{ '\r', "\\r"  },
			{ '\t', "\\t"  },
			{ '\v', "\\v"  }
		};

		assert(s != NULL);
		assert(sz >= 5);

		(void) sz;

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			if (a[i].c == c) {
				return a[i].s;
			}
		}

		if (!isprint((unsigned char) c)) {
			sprintf(s, "\\x%02X", (unsigned char) c);
			return s;
		}

		sprintf(s, "%c", c);
		return s;
	}

@}, @{

	#include <re/re.h>

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	typedef struct flags *flags;
	typedef struct re_err * err;

	typedef struct ast_expr * t_ast__expr;
@};

%terminals%

	INVERT: () -> (c :char) = @{
		@c = '^';
	@};

	RANGE: () -> (c :char, start :pos, end :pos) = @{
		@c = '-';
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OPENGROUP: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLOSEGROUP: () -> (c :char, start :pos, end :pos) = @{
		@c = ']';
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OPENCOUNT: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLOSECOUNT: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	ESC: () -> (c :char, start :pos, end :pos) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] != '\0');
		assert(lex_state->buf.a[2] == '\0');

		@c = lex_state->buf.a[1];

		switch (@c) {
		case 'a': @c = '\a'; break;
		case 'f': @c = '\f'; break;
		case 'n': @c = '\n'; break;
		case 'r': @c = '\r'; break;
		case 't': @c = '\t'; break;
		case 'v': @c = '\v'; break;
		default:             break;
		}

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	NOESC: () -> (c :char, start :pos, end :pos) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] != '\0');
		assert(lex_state->buf.a[2] == '\0');

		@c = lex_state->buf.a[1];

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CONTROL: () -> (c :char, start :pos, end :pos) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] == 'c');
		assert(lex_state->buf.a[2] != '\0');
		assert(lex_state->buf.a[3] == '\0');

		@c = lex_state->buf.a[2];
		if ((unsigned char) @c > 127) {
			@!;
		}
		@c = (((toupper((unsigned char)@c)) - 64) % 128 + 128) % 128;

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OCT: () -> (c :char, start :pos, end :pos) = @{
		unsigned long u;
		char *s, *e;
		int brace = 0;

		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(strlen(lex_state->buf.a) >= 2);

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		errno = 0;

		s = lex_state->buf.a + 1;

		if (s[0] == 'o' && s[1] == '{') {
			s += 2;
			brace = 1;
		}

		u = strtoul(s, &e, 8);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err->e = RE_EOCTRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if (brace && *e == '}') {
			e++;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXESC;
			@!;
		}

		@c = (char) (unsigned char) u;
	@};

	HEX: () -> (c :char, start :pos, end :pos) = @{
		unsigned long u;
		char *s, *e;
		int brace = 0;

		assert(0 == strncmp(lex_state->buf.a, "\\x", 2));
		assert(strlen(lex_state->buf.a) >= 3);

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		errno = 0;

		s = lex_state->buf.a + 2;

		if (*s == '{') {
			s++;
			brace = 1;
		}

		u = strtoul(s, &e, 16);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err->e = RE_EHEXRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if (brace && *e == '}') {
			e++;
		}

		if ((u == ULONG_MAX && errno != 0) || (*e != '\0')) {
			err->e = RE_EXESC;
			@!;
		}

		@c = (char) (unsigned char) u;
	@};

	CHAR: () -> (c :char, start :pos, end :pos) = @{
		/* the first byte may be '\x00' */
		assert(lex_state->buf.a[1] == '\0');

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		@c = lex_state->buf.a[0];
	@};

	START: () -> (p :pred) = @{
		switch (flags->flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_SOT; break;
		case RE_MULTI: @p = RE_SOL; break;
		case RE_ZONE:  @p = RE_SOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	END: () -> (p :pred) = @{
		switch (flags->flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_EOT; break;
		case RE_MULTI: @p = RE_EOL; break;
		case RE_ZONE:  @p = RE_EOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	COUNT: () -> (n :unsigned) = @{
		unsigned long u;
		char *e;

		u = strtoul(lex_state->buf.a, &e, 10);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UINT_MAX) {
			err->e = RE_ECOUNTRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXCOUNT;
			@!;
		}

		@n = (unsigned int) u;
	@};

	NAMED_CHAR_CLASS: () -> (id :ast_char_class_id, start :pos, end :pos) = @{
		enum re_dialect_char_class_lookup_res res;
		res = DIALECT_CHAR_CLASS(lex_state->buf.a, &@id);

		switch (res) {
		default:
		case RE_CLASS_NOT_FOUND:
			/* syntax error -- unrecognized class */
			@!;
		case RE_CLASS_UNSUPPORTED:
			err->e = RE_EXUNSUPPORTD;
			@!;
		case RE_CLASS_FOUND:
			/* proceed below */
			break;
		}

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	FLAG_INSENSITIVE: () -> (flag :re_flags) = @{
		@flag = RE_ICASE;
	@};

%actions%

	/*
	 * These are parser actions common to all grammars provided by libre.
	 * Globs use only a few of the available actions; regexps use most.
	 *
	 * In some cases (e.g. counting) actions are centralised here for
	 * the sake of DRY, at the expense of slight overkill.
	 */
	<err-expected-term> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXTERM;
		}
		@!;
	@};

	<err-expected-count> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCOUNT;
		}
		@!;
	@};

	<err-expected-atoms> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXATOMS;
		}
		@!;
	@};

	<err-expected-alts> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXALTS;
		}
		@!;
	@};

	<err-expected-range> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXRANGE;
		}
		@!;
	@};

	<err-expected-closegroup> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCLOSEGROUP;
		}
		@!;
	@};

	<err-expected-groupbody> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXGROUPBODY;
		}
		@!;
	@};

	<err-unknown-flag> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EFLAG;
		}
		@!;
	@};

	<err-expected-closeflags> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCLOSEFLAGS;
		}
		@!;
	@};

	<err-expected-eof> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXEOF;
		}
		@!;
	@};

	<err-unsupported> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXUNSUPPORTD;
		}
		@!;
	@};

	<mark-group>: (start :pos, end :pos) -> () = @{
		mark(&act_state->groupstart, &@start);
		mark(&act_state->groupend,   &@end);
	@};

	<mark-range>: (start :pos, end :pos) -> () = @{
		mark(&act_state->rangestart, &@start);
		mark(&act_state->rangeend,   &@end);
	@};

	<mark-count>: (start :pos, end :pos) -> () = @{
		mark(&act_state->countstart, &@start);
		mark(&act_state->countend,   &@end);
	@};


	/* AST construction */
	<ast-expr-empty>: () -> (node :ast_expr) = @{
		@node = re_ast_expr_empty();
		if (@node == NULL) { @!; }
	@};

	<ast-expr-concat>: (l :ast_expr, r :ast_expr) -> (node :ast_expr) = @{
		@node = re_ast_expr_concat(@l, @r);
		if (@node == NULL) { @!; }
	@};

	<ast-expr-alt>: (l :ast_expr, r :ast_expr) -> (node :ast_expr) = @{
		@node = re_ast_expr_alt(@l, @r);
		if (@node == NULL) { @!; }
	@};

	<ast-expr-literal>: (c :char) -> (node :ast_expr) = @{
		@node = re_ast_expr_literal(@c);
		if (@node == NULL) { @!; }
	@};

	<ast-expr-any>: () -> (node :ast_expr) = @{
		@node = re_ast_expr_any();
		if (@node == NULL) { @!; }
	@};

	<ast-expr-atom-any>: (c :ast_count) -> (node :ast_expr) = @{
		struct ast_expr *e = re_ast_expr_any();
		if (e == NULL) { @!; }
		@node = re_ast_expr_with_count(e, @c);
		if (@node == NULL) { @!; }
	@};

        <ast-expr-group>: (e :ast_expr) -> (node :ast_expr) = @{
		@node = re_ast_expr_group(@e);
		if (@node == NULL) { @!; }
	@};

	<ast-expr-atom>: (e :ast_expr, c :ast_count) -> (node :ast_expr) = @{
		@node = re_ast_expr_with_count(@e, @c);
		if (@node == NULL) { @!; }
	@};

        <atom-kleene>: () -> (c :ast_count) = @{
		@c = ast_count(0, NULL, AST_COUNT_UNBOUNDED, NULL);
	@};

        <atom-plus>: () -> (c :ast_count) = @{
		@c = ast_count(1, NULL, AST_COUNT_UNBOUNDED, NULL);
	@};

        <atom-one>: () -> (c :ast_count) = @{
		@c = ast_count(1, NULL, 1, NULL);
	@};

        <atom-opt>: () -> (c :ast_count) = @{
		@c = ast_count(0, NULL, 1, NULL);
	@};

        <expr-count>: (l :unsigned, start :pos, h :unsigned, end :pos) -> (c :ast_count) = @{
		struct ast_pos ast_start, ast_end;
		if (@h < @l) {
			err->e = RE_ENEGCOUNT;
			err->m = @l;
			err->n = @h;
			mark(&act_state->countstart, &@start);
			mark(&act_state->countend,   &@end);
			@!;
		}
		AST_POS_OF_LX_POS(ast_start, @start);
		AST_POS_OF_LX_POS(ast_end, @end);

		@c = ast_count(@l, &ast_start, @h, &ast_end);
	@};

	<char-class-ast-literal>: (c :char) -> (node :char_class_ast) = @{
		@node = re_char_class_ast_literal(@c);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-range-distinct>: (from :range_endpoint, start :pos,
	    		to :range_endpoint, end :pos) -> () = @{
		struct ast_pos ast_start, ast_end;
		AST_POS_OF_LX_POS(ast_start, @start);
		AST_POS_OF_LX_POS(ast_end, @end);

		if (@from.t != AST_RANGE_ENDPOINT_LITERAL ||
		    @to.t != AST_RANGE_ENDPOINT_LITERAL) {
			err->e = RE_EXUNSUPPORTD;
			@!;
		}

		if (@from.u.literal.c == @to.u.literal.c) {
			err->e = RE_EDISTINCT;
			@!;
		}
	@};

	<char-class-ast-range>: (from :range_endpoint, start :pos,
	    		to :range_endpoint, end :pos) -> (node :char_class_ast) = @{
		struct ast_pos ast_start, ast_end;
		unsigned char lower, upper;
		AST_POS_OF_LX_POS(ast_start, @start);
		AST_POS_OF_LX_POS(ast_end, @end);

		if (@from.t != AST_RANGE_ENDPOINT_LITERAL ||
		    @to.t != AST_RANGE_ENDPOINT_LITERAL) {
			err->e = RE_EXUNSUPPORTD;
			@!;
		}

		lower = @from.u.literal.c;
		upper = @to.u.literal.c;

		if (lower > upper) {
			char a[5], b[5];
			
			assert(sizeof err->set >= 1 + sizeof a + 1 + sizeof b + 1 + 1);
			
			sprintf(err->set, "%s-%s",
			    escchar(a, sizeof a, lower), escchar(b, sizeof b, upper));
			err->e = RE_ENEGRANGE;
			@!;
		}

		@node = re_char_class_ast_range(&@from, ast_start, &@to, ast_end);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-concat>: (l :char_class_ast, r :char_class_ast) -> (node :char_class_ast) = @{
		@node = re_char_class_ast_concat(@l, @r);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-subtract>: (l :char_class_ast, r :char_class_ast) -> (node :char_class_ast) = @{
		@node = re_char_class_ast_subtract(@l, @r);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-named-class>: (id :ast_char_class_id) -> (node :char_class_ast) = @{
		@node = re_char_class_ast_named_class(@id);
		if (@node == NULL) { @!; }
	@};

	<ast-expr-char-class>: (cca :char_class_ast, start :pos, end :pos) -> (node :ast_expr) = @{
		struct ast_pos ast_start, ast_end;
		AST_POS_OF_LX_POS(ast_start, @start);
		AST_POS_OF_LX_POS(ast_end, @end);
		mark(&act_state->groupstart, &@start);
		mark(&act_state->groupend,   &@end);
		@node = re_ast_expr_char_class(@cca, &ast_start, &ast_end);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-flag-none>: () -> (node :char_class_ast) = @{
		@node = re_char_class_ast_flags(RE_CHAR_CLASS_FLAG_NONE);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-flag-invert>: () -> (node :char_class_ast) = @{
		@node = re_char_class_ast_flags(RE_CHAR_CLASS_FLAG_INVERTED);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-flag-minus>: () -> (node :char_class_ast) = @{
		@node = re_char_class_ast_flags(RE_CHAR_CLASS_FLAG_MINUS);
		if (@node == NULL) { @!; }
	@};

	<char-class-ast-flag-invert-minus>: () -> (node :char_class_ast) = @{
		@node = re_char_class_ast_flags(RE_CHAR_CLASS_FLAG_INVERTED | RE_CHAR_CLASS_FLAG_MINUS);
		if (@node == NULL) { @!; }
	@};

	<ast-range-endpoint-literal>: (c :char) -> (r :range_endpoint) = @{
		struct ast_range_endpoint range;
		range.t = AST_RANGE_ENDPOINT_LITERAL;
		range.u.literal.c = @c;
		@r = range;
	@};

	<ast-range-endpoint-char-class>: (id :ast_char_class_id) -> (r :range_endpoint) = @{
		struct ast_range_endpoint range;
		range.t = AST_RANGE_ENDPOINT_CHAR_CLASS;
		range.u.char_class.ctor = @id;
		@r = range;
	@};

	<re-flag-none>: () -> (f :re_flags) = @{
	        @f = RE_FLAGS_NONE;
	@};

	<re-flag-union>: (in :re_flags, flag :re_flags) -> (out :re_flags) = @{
		@out = @in | @flag;
	@};

	<ast-expr-re-flags>: (pos :re_flags, neg :re_flags) -> (node :ast_expr) = @{
		@node = re_ast_expr_re_flags(@pos, @neg);
		if (@node == NULL) { @!; }
	@};

%trailer% @{

	static int
	lgetc(struct LX_STATE *lx)
	{
		struct lex_state *lex_state;

		assert(lx != NULL);
		assert(lx->getc_opaque != NULL);

		lex_state = lx->getc_opaque;

		assert(lex_state->f != NULL);

		return lex_state->f(lex_state->opaque);
	}

	struct ast_re *
	DIALECT_PARSE(re_getchar_fun *f, void *opaque,
		const struct fsm_options *opt,
		enum re_flags flags, int overlap,
		struct re_err *err)
	{
		struct ast_re *ast;
		struct flags top, *fl = &top;

		struct act_state  act_state_s;
		struct act_state *act_state;
		struct lex_state  lex_state_s;
		struct lex_state *lex_state;
		struct re_err dummy;

		struct LX_STATE *lx;

		top.flags = flags;

		assert(f != NULL);

		ast = re_ast_new();

		if (err == NULL) {
			err = &dummy;
		}

		lex_state    = &lex_state_s;
		lex_state->p = lex_state->a;

		lx = &lex_state->lx;

		LX_INIT(lx);

		lx->lgetc       = lgetc;
		lx->getc_opaque = lex_state;

		lex_state->f       = f;
		lex_state->opaque  = opaque;

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		/* XXX: unneccessary since we're lexing from a string */
		/* (except for pushing "[" and "]" around ::group-$dialect) */
		lx->buf_opaque = &lex_state->buf;
		lx->push       = CAT(LX_PREFIX, _dynpush);
		lx->clear      = CAT(LX_PREFIX, _dynclear);
		lx->free       = CAT(LX_PREFIX, _dynfree);

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		act_state->overlap = overlap;

		err->e = RE_ESUCCESS;

		ADVANCE_LEXER;
		DIALECT_ENTRY(fl, lex_state, act_state, err, &ast->expr);

		lx->free(lx->buf_opaque);

		if (err->e != RE_ESUCCESS) {
			/* TODO: free internals allocated during parsing (are there any?) */
			goto error;
		}

		if (ast->expr == NULL) {
			/* We shouldn't get here, it means there's error
			 * checking missing elsewhere. */
			if (err->e == RE_ESUCCESS) { assert(0); }
			goto error;
		}

		return ast;

	error:

		/*
		 * Some errors describe multiple tokens; for these, the start and end
		 * positions belong to potentially different tokens, and therefore need
		 * to be stored statefully (in act_state). These are all from
		 * non-recursive productions by design, and so a stack isn't needed.
		 *
		 * Lexical errors describe a problem with a single token; for these,
		 * the start and end positions belong to that token.
		 *
		 * Syntax errors occur at the first point the order of tokens is known
		 * to be incorrect, rather than describing a span of bytes. For these,
		 * the start of the next token is most relevant.
		 */

		switch (err->e) {
		case RE_EOVERLAP:  err->start = act_state->groupstart; err->end = act_state->groupend; break;
		case RE_ENEGRANGE: err->start = act_state->rangestart; err->end = act_state->rangeend; break;
		case RE_ENEGCOUNT: err->start = act_state->countstart; err->end = act_state->countend; break;

		case RE_EHEXRANGE:
		case RE_EOCTRANGE:
		case RE_ECOUNTRANGE:
			/*
			 * Lexical errors: These are always generated for the current token,
			 * so lx->start/end here is correct because ADVANCE_LEXER has
			 * not been called.
			 */
			mark(&err->start, &lx->start);
			mark(&err->end,   &lx->end);
			break;

		default:
			/*
			 * Due to LL(1) lookahead, lx->start/end is the next token.
			 * This is approximately correct as the position of an error,
			 * but to be exactly correct, we store the pos for the previous token.
			 * This is more visible when whitespace exists.
			 */
			err->start = act_state->synstart;
			err->end   = act_state->synstart; /* single point */
			break;
		}

		re_ast_free(ast);

		return NULL;
	}

@}, @{

@};

