/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * Regular expressions, as evaluated by PCRE, which supports the
 * patterns listed at:
 *     http://pcre.org/current/doc/html/pcre2pattern.html
 *
 * Note that not all PCRE regex extensions are supported yet.
 * For unsupported extensions, our intension is to explicitly
 * return an 'unsupported' error, rather than treating the
 * unrecognized syntax incorrectly.
 */

%types%

	pos;
	char;
	unsigned;
	!pred;
	re_flags;
	!err;
	ast_expr;
	ast_class_id;
	ast_count;
	ast_class;
	endpoint;

%terminals%

	ANY;
	!MANY;
	OPT;
	PLUS;
	ALT;
	SEP;
	STAR;

	START;
	END;

	OPENSUB; OPENCAPTURE; CLOSE;
	OPENGROUP: () -> (:pos, :pos); CLOSEGROUP: () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos); CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	OPENFLAGS;
	CLOSEFLAGS;
	NEGATE;
	FLAG_UNKNOWN;
	FLAG_INSENSITIVE: () -> (:re_flags);

	ESC:     () -> (:char, :pos, :pos);
	!NOESC:  () -> (:char, :pos, :pos);
	CONTROL: () -> (:char, :pos, :pos);
	OCT:     () -> (:char, :pos, :pos);
	HEX:     () -> (:char, :pos, :pos);
	CHAR:    () -> (:char, :pos, :pos);
	COUNT:   () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	<re-flag-none>:  ()                     -> (:re_flags);
	<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	<atom-kleene>: () -> (:ast_count);
	<atom-plus>:   () -> (:ast_count);
	<atom-one>:    () -> (:ast_count);
	<atom-opt>:    () -> (:ast_count);
	<atom-count>:  (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<unbounded-count>:	() -> (:unsigned);

	<ast-range-endpoint-literal>: (:char)         -> (:endpoint);
	<ast-range-endpoint-class>:   (:ast_class_id) -> (:endpoint);
	!<ast-range-distinct>: (:endpoint, :pos, :endpoint, :pos) -> ();

	<ast-make-expr-empty>:        ()                       -> (:ast_expr);
	<ast-make-expr-literal>:      (:char)                  -> (:ast_expr);
	<ast-make-expr-concat>:       ()                       -> (:ast_expr);
	<ast-make-expr-alt>:          ()                       -> (:ast_expr);
	<ast-make-expr-any>:          ()                       -> (:ast_expr);
	<ast-make-expr-atom>:         (:ast_expr, :ast_count)  -> (:ast_expr);
	!<ast-make-expr-atom-any>:    (:ast_count)             -> (:ast_expr);
	<ast-make-expr-class>:        (:ast_class, :pos, :pos) -> (:ast_expr);
	<ast-make-expr-group>:        (:ast_expr)              -> (:ast_expr);
	<ast-make-expr-re-flags>:     (:re_flags, :re_flags)   -> (:ast_expr);
	<ast-make-expr-anchor-start>: ()                       -> (:ast_expr);
	<ast-make-expr-anchor-end>:   ()                       -> (:ast_expr);

	<ast-add-expr-concat>: (:ast_expr, :ast_expr) -> ();
	<ast-add-expr-alt>:    (:ast_expr, :ast_expr) -> ();

	<ast-make-class-concat>:      ()                       -> (:ast_class);
	<ast-make-class-literal>:     (:char)                  -> (:ast_class);
	<ast-make-class-range>:       (:endpoint, :pos, :endpoint, :pos) -> (:ast_class);
	!<ast-make-class-subtract>:   (:ast_class, :ast_class) -> (:ast_class);
	<ast-make-class-named>:       (:ast_class_id)          -> (:ast_class);

	<ast-make-class-flag-none>:   () -> (:ast_class);
	<ast-make-class-flag-invert>: () -> (:ast_class);
	!<ast-make-class-flag-minus>: () -> (:ast_class);
	!<ast-make-class-flag-invert-minus>: () -> (:ast_class);

	<ast-add-class-concat>: (:ast_class, :ast_class) -> ();

	<err-expected-term>;
	<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	<err-expected-range>;
	<err-expected-closegroup>;
	!<err-expected-groupbody>;
	<err-unknown-flag>;
	<err-expected-closeflags>;
	<err-expected-eof>;
	<err-unsupported>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();

	expr: () -> (node :ast_expr) [
		literal: () -> (node :ast_expr) = {
			{
				(c, !, !) = ESC;
			||
				(c, !, !) = OCT;
			||
				(c, !, !) = HEX;
			||
				(c, !, !) = CHAR;
			};
			node = <ast-make-expr-literal>(c);
		};
		    
		character-class: () -> (node :ast_expr) [

			class-head: (class :ast_class) -> () = {
				! = INVERT;
				f = <ast-make-class-flag-invert>();
				<ast-add-class-concat>(class, f);
			||
				/* XXX: why add a node at all? */
				f = <ast-make-class-flag-none>();
				<ast-add-class-concat>(class, f);
			};

			class-literal: () -> (node :ast_class) = {
				{
					(c, !, !) = ESC;
				||
					(c, !, !) = OCT;
				||
					(c, !, !) = HEX;
				||
					(c, !, !) = CHAR;
				||
					(c, !, !) = CONTROL;
					/* TODO: just construct the AST here;
					 * complain about unsupported things at a later stage */
					<err-unsupported>();
				};
				node = <ast-make-class-literal>(c);
	  		};

			class-named: () -> (node :ast_class) = {
				(id, !, !) = NAMED_CLASS;
				node = <ast-make-class-named>(id);
			};

			class-range: () -> (node :ast_class) [

				range-endpoint-literal: () -> (r :endpoint, start :pos, end :pos) = {
					{
						(c, start, end) = ESC;
					||
						(c, start, end) = OCT;
					||
						(c, start, end) = HEX;
					||
						(c, start, end) = CHAR;
					||
						(c, start, end) = CONTROL;
						<err-unsupported>();
					};
					r = <ast-range-endpoint-literal>(c);
				};

				range-endpoint-class: () -> (r :endpoint, start :pos, end :pos) = {
					(id, start, end) = NAMED_CLASS;
					r = <ast-range-endpoint-class>(id);
				};

			] = {
				{
					(lower, start, !) = range-endpoint-literal();
				||
					(lower, start, !) = range-endpoint-class();
				};

				{
					(!, !, !) = RANGE;
				##
					<err-expected-range>;
				};

				{
					(upper, !, end) = range-endpoint-literal();
				||
					(upper, !, end) = range-endpoint-class();
				||
					/* allow literal '-' as end of range */
					(c, !, end) = RANGE;
					upper = <ast-range-endpoint-literal>(c);
				};

				<mark-range>(start, end);
				node = <ast-make-class-range>(lower, start, upper, end);
			};

			class-term: () -> (node :ast_class) = {
				node = class-literal();
			||
				node = class-range();
			||
				node = class-named();
			};

			list-of-class-terms: (class :ast_class) -> () = {
				{
					node = class-term();
					<ast-add-class-concat>(class, node);
				##
					<err-expected-term>;
				};

				{
					list-of-class-terms(class);
				||
					$;
				};
			};

		] = {
			(start, !) = OPENGROUP;

			class = <ast-make-class-concat>;

			class-head(class);
			list-of-class-terms(class);

			{
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
				end = start; /* appease sid */
			};

			node = <ast-make-expr-class>(class, start, end);
		};

		type: () -> (node :ast_expr) = {
			(id, start, end) = NAMED_CLASS;
			named = <ast-make-class-named>(id);
			node = <ast-make-expr-class>(named, start, end);
		};

		flags: () -> (node :ast_expr) [
			flag_set: (i :re_flags) -> (o :re_flags) = {
				c = FLAG_INSENSITIVE;
				o = <re-flag-union>(i, c);
			||
				FLAG_UNKNOWN;
				o = i;
				<err-unknown-flag>;
			};
		] = {
			OPENFLAGS;

			empty_pos = <re-flag-none>();
			empty_neg = <re-flag-none>();

			{
				pos = flag_set(empty_pos);
			||
				pos = empty_pos;
			};

			{
				NEGATE;
				neg = flag_set(empty_neg);
			||
				neg = empty_neg;
			};

			{
				CLOSEFLAGS;
				node = <ast-make-expr-re-flags>(pos, neg);
			##
				<err-expected-closeflags>;
				node = <ast-make-expr-empty>();
			};
		};

		atom: () -> (node :ast_expr) = {
			/*
			 * Note that START and END can appear embedded
			 * within a list of atoms. Whether that makes
			 * the regex inherently unmatchable depends on
			 * whether the surrounding context is nullable
			 * or not, so that's detected after parsing has
			 * finished.
			 */
			{
				OPENCAPTURE;
				g = expr();
				e = <ast-make-expr-group>(g);
				{
					CLOSE;
				##
					<err-expected-alts>;
				};
			||
				OPENSUB;
				e = expr();
				{
					CLOSE;
				##
					<err-expected-alts>;
				};
			||
				e = character-class();
			||
				e = type();
			||
				e = literal();
			||
				e = flags();
			||
				START;
				e = <ast-make-expr-anchor-start>();
			||
				END;
				e = <ast-make-expr-anchor-end>();
			||
				ANY;
				e = <ast-make-expr-any>();
			||
				(!, !, !) = CONTROL;
				<err-unsupported>();
				e = <ast-make-expr-empty>(); /* appease sid */
			};

			{
				(start, !) = OPENCOUNT;
				m = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <atom-count>(m, start, m, end);
				node = <ast-make-expr-atom>(e, c);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				n = COUNT;
				(end, !) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <atom-count>(m, start, n, end);
				node = <ast-make-expr-atom>(e, c);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				(end, !) = CLOSECOUNT;
				<mark-count>(start, end);
				n = <unbounded-count>;
				c = <atom-count>(m, start, n, end);
				node = <ast-make-expr-atom>(e, c);
			||
				OPT;
				c = <atom-opt>();
				node = <ast-make-expr-atom>(e, c);
			||
				STAR;
				c = <atom-kleene>();
				node = <ast-make-expr-atom>(e, c);
			||
				PLUS;
				c = <atom-plus>();
				node = <ast-make-expr-atom>(e, c);
			||
				c = <atom-one>();
				node = <ast-make-expr-atom>(e, c);
			##
				<err-expected-count>;
				node = e;
			};
		};

		list-of-atoms: (cat :ast_expr) -> () = {
			a = atom();

			<ast-add-expr-concat>(cat, a);

			{
				list-of-atoms(cat);
			||
				$;
			};
		};

		alt: () -> (node :ast_expr) = {
			node = <ast-make-expr-concat>;
			list-of-atoms(node);
		||
			/* explcitly allow an empty alt */
			node = <ast-make-expr-empty>;
		};

		list-of-alts: (alts :ast_expr) -> () = {
			a = alt();

			<ast-add-expr-alt>(alts, a);

			{
				ALT;

				list-of-alts(alts);
			||
				$;
			};
		##
			<err-expected-alts>;
		};

	] = {
		node = <ast-make-expr-alt>;
		list-of-alts(node);
	##
		<err-expected-alts>;
		node = <ast-make-expr-empty>();
	};

	re_pcre: () -> (node :ast_expr) = {
		{
			node = expr();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_pcre;

