#
# Copyright 2008-2017 Katherine Flavel
#
# See LICENCE for the full copyright terms.
#

'('  -> $open;
')'  -> $close;

# partial support for named capture groups...  the syntax is recognized,
# but because capture groups are not yet supported, we don't (yet) link
# the name to the capture group
'(?<' /[_A-Za-z][_A-Za-z0-9]*/ '>' -> $opencapture;

# predicates
'^'  -> $start;
'$'  -> $end__nl; # equivalent to \Z in single-line mode

# Similar predicates.  Without the concept of "multiline mode," these
# should be the same as ^ and $.
#
# > The \A, \Z, and \z assertions differ from the traditional circumflex
# > and dollar (described in the next section) in that they only ever
# > match at the very start and end of the subject string, whatever
# > options are set. Thus, they are independent of multiline mode. 
#
# > \Z matches before a newline at the end of the string
# > as well as at the very end, whereas \z matches only at the end.
'\A' -> $start;
'\Z' -> $end__nl;
'\z' -> $end;

# unicode crime, one "code unit, whether or not a UTF mode is set"
# not supporting this is equivalent to PCRE2_NEVER_BACKSLASH_C
'\C' -> $unsupported;

# unicode extended grapheme cluster
'\X' -> $unsupported;

# this could be implemented
# > matches at the first matching position in the subject
# also:
# > The \G assertion is true only when the current matching position is
# > at the start point of the matching process, as specified by the
# > startoffset argument of pcre2_match(). It differs from \A when the
# > value of startoffset is non-zero. By calling pcre2_match() multiple
# > times with appropriate arguments, you can mimic Perl's /g option, and
# > it is in this kind of implementation where \G can be useful. 
'\G' -> $unsupported;

# A lone '\E' without a preceding \Q is ignored
'\E';

# operators
'?'  -> $opt;
'*'  -> $star;
'+'  -> $plus;
'.'  -> $any;
'|'  -> $alt;

# standard escapes
'\\' -> $esc;
'\^' -> $esc;
'\$' -> $esc;
'\?' -> $esc;
'\*' -> $esc;
'\+' -> $esc;
'\.' -> $esc;
'\|' -> $esc;
'\(' -> $esc; '\)' -> $esc;
'\{' -> $esc; # note no \}
'\[' -> $esc; # note no \]

# whitespace escapes
'\f' -> $esc;
'\n' -> $esc;
'\r' -> $esc;
'\t' -> $esc;

# perl/unix-ish escapes
'\a' -> $esc;
'\e' -> $esc;
'\c' /./ -> $control;

# character type escapes
# Note, this needs a double underscore because sid expects any '_'
# in a C identifier converts to "__".
'\d' -> $named__class;
'\D' -> $named__class;
'\h' -> $named__class;
'\H' -> $named__class;
'\s' -> $named__class;
'\S' -> $named__class;
'\v' -> $named__class;
'\V' -> $named__class;
'\w' -> $named__class;
'\W' -> $named__class;

# This break the uppercase/lowercase symmetry; conceptually, it's the
# negation of `.`, which matches everything except `\n`.
'\N' -> $named__class;

# configurable line ending
'\R' -> $eol;

'\o{' /[0-7]+/i '}'    -> $oct;
'\x'  /[0-9a-f]{0,2}/i -> $hex;
'\x{' /[0-9a-f]+/i '}' -> $hex;

# "After \0 up to two further octal digits are read. If there are fewer
# than two digits, just those that are present are used.
# Thus the sequence \0\x\015 specifies two binary zeros followed by a
# CR character (code value 13)."
'\0'  /[0-7]{0,2}/     -> $oct;

# "Outside a character class, a backslash followed by a digit greater than 0
# (and possibly further digits) is a back reference to a capturing subpattern
# earlier (that is, to its left) in the pattern, provided there have been that
# many previous capturing left parentheses."
#
# "... PCRE reads the digit and any following digits as a decimal number."
#
# "However, if the decimal number following the backslash is less than 10,
# it is always taken as a back reference, and causes an error only if there
# are not that many capturing left parentheses in the entire pattern.
# In other words, the parentheses that are referenced need not be to the left
# of the reference for numbers less than 10. ... It is not possible to have a
# numerical "forward back reference" to a subpattern whose number is 10 or more
# using this syntax because a sequence such as \50 is interpreted as a character
# defined in octal."
#
# So I take the pattern below to mean a decimal sequence which may be either
# a backreference or something else (I presume a base 10 literal). Either way
# I'm disallowing both of these here for now. I think it is possible that we
# could lex and parse these eventually though (which I do not think we could
# do for the same sequence inside a character class).
'\'   /[1-9][0-9]*/    -> $unsupported;

# the new and proper way for back references
'\g' -> $unsupported;

# Yet another way to indicate back references
'\k' -> $unsupported;

# lookahead and lookbehind are unsupported
'(?='  -> $unsupported;
'(?!'  -> $unsupported;
'(?<=' -> $unsupported;
'(?<!' -> $unsupported;

# various backtracking control things that aren't supported
'(*' .. ')' {
	# PCRE2, taking from Perl 5.28
	'positive_lookahead:'  -> $unsupported;
	'negative_lookahead:'  -> $unsupported;
	'positive_lookbehind:' -> $unsupported;
	'negative_lookbehind:' -> $unsupported;

	# three-letter synonynms
	'pla:' -> $unsupported;
	'nla:' -> $unsupported;
	'plb:' -> $unsupported;
	'nlb:' -> $unsupported;

	# backtracking control
	'NO_START_OPT' -> $unsupported;
	/(ACCEPT|SKIP|FAIL|F|MARK|COMMIT|PRUNE|THEN)(:[^)]+)?/ -> $unsupported;
	/:[^)]+/ -> $unsupported;

	# atomic assertions are also unsupported
	'atomic:' -> $unsupported;

	# different line ending conventions
	# these are only permitted at the start of a regexp
	/CR|LF|CRLF|ANYCRLF|ANY/ -> $unsupported;
}

# Resets current captured text.  Not _yet_ supported.
'\K' -> $unsupported;

# \b and \B indicate word/not-word boundaries, and are not (yet?)
# supported
'\b' -> $unsupported;
'\B' -> $unsupported;

'\' /./ - ($esc | $control | $oct | $hex | '\Q' | '\A' | '\Z' | '\z' | '\E' | '\R' | $named__class | $unsupported) -> $noesc;
'\' -> $invalid;

# Comments are just ignored... no token emitted
'(?#' .. ')' {
	# emit a token if the comment has nested parens, which are
        # explicitly not permitted according to the pcrepattern(3)
        # documentation -- see COMMENTS. While the PCRE library does
        # accept them (example: `echo x | pcregrep '(?#...(abc)x'`),
        # this is a bug in PCRE.
	'(' -> $invalid__comment;
	/[^()]+/;
}

'(?' -> $flags .. ':' -> $sub, ')' -> $close {
	'-' -> $negate;
	'xx' -> $flag__unknown;  # xx (EXTENDED_MORE) is not yet supported
	'i' -> $flag__insensitive;
	's' -> $flag__single;
	'x' -> $flag__extended;
	'n' -> $flag__ignore; # 'n' is the no auto capture flag, which we can ignore
	flags = $flag__insensitive | $flag__single | $flag__extended | $flag__ignore;
	/[a-z]/ - flags -> $flag__unknown;

	# this is a little too broad... but should screen out
	# recursive matching and subroutines, which are
	# unsupported.
	#
	# TODO: Find a way to handle this in a more restricted
	#       manner.  Ideally we select a more limited language:
	#       '(?' /(+|-)?[0-9]+/ ')'
	'+'      -> $unsupported;
	/[0-9]+/ -> $unsupported;
	'R'      -> $unsupported;
}

# recursion with named parentheses
'(?&' -> $unsupported;
'(?P>' -> $unsupported;

'[' -> $opengroup, '[^' -> $opengroupinv, '[]' -> $opengroupcb, '[^]' -> $opengroupinvcb .. ']' -> $closegroup, '-]' -> $closegrouprange {
	'-' -> $range;

	# extension escapes
	'\\' -> $esc;
	'\^' -> $esc;
	'\-' -> $esc;

	# whitespace escapes
	'\f' -> $esc;
	'\n' -> $esc;
	'\r' -> $esc;
	'\t' -> $esc;

	# within a character class, \b is backspace
	'\b' -> $esc;

	# perl/unix-ish escapes
	'\a' -> $esc;
	'\e' -> $esc;
	'\c' /./ -> $control;

	# other metacharacters that can be escaped within square brackets
	# for consistency's sake, although it isn't strictly necessary
	'\$' -> $esc;
	'\.' -> $esc;
	'\[' -> $esc;
	'\|' -> $esc;
	'\(' -> $esc;
	'\?' -> $esc;
	'\*' -> $esc;
	'\+' -> $esc;
	'\{' -> $esc;

	# "The sequences \B, \N, \R, and \X are not special inside a character class.
	# Like any other unrecognized escape sequences, they are treated as the literal
	# characters "B", "N", "R", and "X" by default"
	'\B' -> $noesc;
	'\N' -> $noesc;
	'\R' -> $noesc;
	'\X' -> $noesc;

	'\d' -> $named__class;
	'\D' -> $named__class;
	'\h' -> $named__class;
	'\H' -> $named__class;
	'\s' -> $named__class;
	'\S' -> $named__class;
	'\v' -> $named__class;
	'\V' -> $named__class;
	'\w' -> $named__class;
	'\W' -> $named__class;

	'\o{' /[0-7]+/i '}'    -> $oct;
	'\x'  /[0-9a-f]{0,2}/i -> $hex;
	'\x{' /[0-9a-f]+/i '}' -> $hex;

	'\0'  /[0-7]{0,2}/     -> $oct;

	# "Inside a character class, or if the decimal number following \ is
	# greater than 7 and there have not been that many capturing subpatterns,
	# PCRE handles \8 and \9 as the literal characters "8" and "9", and
	# otherwise re-reads up to three octal digits following the backslash,
	# using them to generate a data character. Any subsequent digits stand
	# for themselves. For example:"
	#
	# " \81    is either a back reference, or the two characters "8" and "1""
	#
	# For this reason I do not think we can ever lex correctly here, because
	# we would need to produce either one or two tokens, depending on the
	# presence of capturing groups.
	'\'   /[1-9][0-9]*/     -> $unsupported;

	'\' /./ - ($esc | $control | $oct | $hex | '\Q' | '\E' | '\B' | '\N' | '\R' | '\X' | $named__class | '\' /[1-9][0-9]*/ ) -> $noesc;
	'\' -> $invalid;

	# FIXME: negated character classes, e.g. [:^alpha:]
	'[:alnum:]'  -> $named__class;
	'[:alpha:]'  -> $named__class;
	'[:ascii:]'  -> $named__class;
	'[:blank:]'  -> $named__class;
	'[:cntrl:]'  -> $named__class;
	'[:digit:]'  -> $named__class;
	'[:graph:]'  -> $named__class;
	'[:lower:]'  -> $named__class;
	'[:print:]'  -> $named__class;
	'[:punct:]'  -> $named__class;
	'[:space:]'  -> $named__class;
	'[:upper:]'  -> $named__class;
	'[:word:]'   -> $named__class;
	'[:xdigit:]' -> $named__class;

	# XXX: /./ - the above
	/[^\-\\\x00]/ -> $char;

	# lone \E without a preceding \Q is ignored
	'\E';

	'\Q' .. '\E' {
		/./ - "\x00" -> $char;
	}
}

'{' -> $opencount .. '}' -> $closecount {
	','      -> $sep;
	/[0-9]+/ -> $count;
}

'#'  -> $maybe_comment;

" "  -> $whitespace;
"\t" -> $whitespace;
"\v" -> $whitespace;
"\f" -> $whitespace;
"\n" -> $newline;
"\r" -> $newline;

'\Q' .. '\E' {
	# TODO: check if extended mode (x) ignores whitespace between \Q
	# and \E
	/./ - "\x00" -> $char;
}

/./ - ($open | $close | $start | $end__nl
	| $opt | $star | $plus | $any | $alt
	| $esc | $oct | $hex | $invalid
	| $maybe_comment | $whitespace | $newline
	| $opengroup | $opencount | "\x00") -> $char;

