/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * ISO/IEC 9075-2:2003 (E) ©ISO/IEC
 * 8.6 <similar predicate>
 *
 * https://firebirdsql.org/refdocs/langrefupd25-similar-to.html
 *
 * TODO: SQL99/2003 permit an arbitrary optional escape character
 */

%types%

	pos;
	char;
	unsigned;
	!re_flags;
	!err;
	ast_expr;
	ast_count;
	ast_class_id;
	endpoint;
	group_id;

%terminals%

	ANY;
	MANY;
	!EOL;
	OPT;
	PLUS;
	ALT;
	STAR;

	!START;
	!END;
	!END_NL;

	OPENSUB;   CLOSESUB;
	OPENGROUP:  () -> (:pos, :pos); CLOSEGROUP:  () -> (:char, :pos, :pos);

	!OPENGROUPINV: () -> (:pos, :pos);
	!OPENGROUPCB: () -> (:pos, :pos);
	!OPENGROUPINVCB: () -> (:pos, :pos);
	!CLOSEGROUPRANGE: () -> (:char, :pos, :pos);

	OPENCOUNT: () -> (:pos, :pos);
	COUNT: () -> (:unsigned);
	SEP;
	CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_IGNORE;
	!FLAG_UNKNOWN;
	!FLAG_EXTENDED: () -> (:re_flags);
	!FLAG_SINGLE: () -> (:re_flags);
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!WHITESPACE: () -> (:char, :pos, :pos);
	!NEWLINE: () -> (:char, :pos, :pos);
	!MAYBE_COMMENT: () -> (:char, :pos, :pos);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);

	!UNSUPPORTED:     () -> (:char, :pos, :pos);

	EOF;
	!ERROR;

%productions%

	!<re-flag-none>:  ()                     -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	!<count-unbounded>:   () -> (:unsigned);
	<count-zero-or-more>: () -> (:ast_count);
	<count-one-or-more>:  () -> (:ast_count);
	<count-zero-or-one>:  () -> (:ast_count);
	<count-one>:          () -> (:ast_count);
	<count-range>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<make-group-id>:       () -> (:group_id);
	!<make-literal-cbrak>: () -> (:char);
	!<make-literal-cr>:    () -> (:char);
	!<make-literal-nl>:    () -> (:char);

	<ast-range-endpoint-literal>: (:char)         -> (:endpoint);
	!<ast-range-endpoint-class>:  (:ast_class_id) -> (:endpoint);

	<ast-make-empty>:         ()                       -> (:ast_expr);
	<ast-make-literal>:       (:char)                  -> (:ast_expr);
	<ast-make-concat>:        ()                       -> (:ast_expr);
	<ast-make-alt>:           ()                       -> (:ast_expr);
	<ast-make-piece>:         (:ast_expr, :ast_count)  -> (:ast_expr);
	<ast-make-group>:         (:ast_expr, :group_id)   -> (:ast_expr);
	!<ast-get-re-flags>:      ()                       -> (:re_flags);
	!<ast-set-re-flags>:      (:re_flags)              -> ();
	!<ast-mask-re-flags>:     (:re_flags, :re_flags)   -> ();
	!<ast-make-anchor-start>: ()                       -> (:ast_expr);
	!<ast-make-anchor-end>:   ()                       -> (:ast_expr);
	!<ast-make-anchor-end-nl>:()                       -> (:ast_expr);
	<ast-make-subtract>:      (:ast_expr, :ast_expr)   -> (:ast_expr);
	<ast-make-invert>:        (:ast_expr)              -> (:ast_expr); 
	<ast-make-range>:         (:endpoint, :pos, :endpoint, :pos) -> (:ast_expr);
	<ast-make-named>:         (:ast_class_id)          -> (:ast_expr);

	<ast-add-concat>: (:ast_expr, :ast_expr) -> ();
	<ast-add-alt>:    (:ast_expr, :ast_expr) -> ();

	<err-expected-term>;
	<err-expected-count>;
	<err-expected-atom>;
	<err-expected-alts>;
	!<err-expected-range>;
	<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;
	!<err-unsupported>;
	!<err-invalid-comment>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();
	<mark-expr>: (:ast_expr, :pos, :pos) -> ();

	<class-any>:  () -> (:ast_class_id);
	!<class-bsr>: () -> (:ast_class_id);

	expr: () -> (node :ast_expr) [

		/*
		 * [abc] -> when it reaches the end, make an empty class, and
		 * each character literal / named class / etc. modifies it.
		 *
		 * in the case of the SQL dialect's wonky [abc^def], it should
		 * create two groups, and then remove anything from the former
		 * that is in the latter.
		 *
		 * [abc] literals
		 * [a-c] range
		 * [-^] characters only allowed at the head
		 * [-] also allowed at the tail (just [-] is ambiguous)
		 * [[:NAME:]] named character classes
		 *
		 * TODO: describe [abc^xyz]
		 *
		 * _ is the ANY character class
		 */
		character-class: () -> (node :ast_expr) [

			class-head: (class :ast_expr &) -> () = {
				! = INVERT;
				&class = <ast-make-invert>(class);
			||
				(c, !, !) = RANGE;
				node = <ast-make-literal>(c);
				<ast-add-alt>(class, node);
			||
				! = INVERT;

				(c, !, !) = RANGE;
				node = <ast-make-literal>(c);
				<ast-add-alt>(class, node);

				&class = <ast-make-invert>(class);
			||
				$;
			};

			class-tail: (class :ast_expr) -> () = {
				/* XXX: This requires LL(2). */

			/* 	(c, !, !) = RANGE;
			 *	node = <ast-make-literal>(c);
			 *  <ast-add-alt>(class, node);
			 * || */
				$;
			};

			class-literal: () -> (node :ast_expr) = {
				(c, !, !) = CHAR;
				node = <ast-make-literal>(c);
			};

			class-named: () -> (node :ast_expr) = {
				(id, !, !) = NAMED_CLASS;
				node = <ast-make-named>(id);
			};

			class-range: () -> (node :ast_expr) = {
				(ca, start, !) = CHAR;
				a = <ast-range-endpoint-literal>(ca);

				(!, !, !) = RANGE;

				(cz, !, end) = CHAR;
				z = <ast-range-endpoint-literal>(cz);

				<mark-range>(start, end);
				node = <ast-make-range>(a, start, z, end);
			};

			class-term: () -> (node :ast_expr) = {
				node = class-range;
			||
				node = class-literal;
			||
				node = class-named;
			};

			list-of-class-terms: (class :ast_expr) -> () = {
				{
					node = class-term;
					<ast-add-alt>(class, node);
				##
					<err-expected-term>;
				};

				{
					list-of-class-terms(class);
				||
					$;
				};
			};

		] = {
			(open_start, open_end) = OPENGROUP;

			class = <ast-make-alt>;
			tmp = class;

			class-head(&class);
			list-of-class-terms(tmp);
			class-tail(tmp);

			{
				(!, close_start, close_end) = CLOSEGROUP;
				<mark-group>(open_start, open_end);

				<mark-expr>(tmp, open_start, close_end);

				node = class;
			||
				/*
				 * SQL 2003 §8.6.7 I:
				 *
				 *  L( <left bracket> <character enumeration include>
				 *       <circumflex> <character enumeration exclude> <right bracket> )
				 *
				 *  is the set of all strings of length 1 (one) taken from the set
				 *  of characters in the <character enumeration include>s, except for
				 *  those strings of length 1 (one) taken from the set of characters
				 *  in the <character enumeration exclude>.
				 *
				 * We implement this by constructing a binary expression subtracting
				 * two classes expressed in the positive.
				 */

				! = INVERT;

				mask = <ast-make-alt>;
				mask_tmp = mask;

				/* TODO: does the grammar allow [abc^^xyz] to invert the mask here? */

				class-head(&mask);
				list-of-class-terms(mask_tmp);
				class-tail(mask_tmp);

				{
					(!, close_start, close_end) = CLOSEGROUP;
					<mark-group>(close_start, close_end);
				##
					<err-expected-closegroup>;

					/* appease sid */
					close_start = open_end;
					close_end   = open_end;
				};

				/* TODO: would prefer to demark class and mask separately */
				<mark-expr>(tmp, open_start, close_end);
				<mark-expr>(mask_tmp, open_start, close_end);

				/* TODO: store start, end for the subtract expr */
				node = <ast-make-subtract>(class, mask);
			##
				<err-expected-closegroup>;
				node = <ast-make-empty>;
			};
		};

		piece: () -> (node :ast_expr) [

			atom: () -> (e :ast_expr) = {
				ANY;
				a = <class-any>;
				e = <ast-make-named>(a);
			||
				MANY;
				a = <class-any>;
				g = <ast-make-named>(a);
				c = <count-zero-or-more>;
				e = <ast-make-piece>(g, c);
			||
				(a, !, !) = CHAR;
				e = <ast-make-literal>(a);
			||
				e = character-class;
			||
				OPENSUB;
				id = <make-group-id>;
				g = expr;
				e = <ast-make-group>(g, id);
				CLOSESUB;
			##
				<err-expected-atom>;
				e = <ast-make-empty>;
			};

			count: () -> (c :ast_count) = {
				STAR;
				c = <count-zero-or-more>;
			||
				PLUS;
				c = <count-one-or-more>;
			||
				OPT;
				c = <count-zero-or-one>;
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <count-range>(m, start, m, end);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				n = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <count-range>(m, start, n, end);
			||
				c = <count-one>;
			##
				<err-expected-count>;
				c = <count-one>;
			};

		] = {
			e = atom;
			c = count;

			node = <ast-make-piece>(e, c);
		};

		list-of-pieces: (cat :ast_expr) -> () = {
			a = piece;
			<ast-add-concat>(cat, a);

			{
				list-of-pieces(cat);
			||
				$;
			};
		};

		alt: () -> (node :ast_expr) = {
			node = <ast-make-concat>;
			list-of-pieces(node);
		||
			/* explcitly allow an empty alt */
			node = <ast-make-empty>;
		};

		list-of-alts: (alts :ast_expr) -> () = {
			a = alt;
			<ast-add-alt>(alts, a);

			{
				ALT;

				list-of-alts(alts);
			||
				$;
			};
		##
			<err-expected-alts>;
		};

	] = {
		node = <ast-make-alt>;
		list-of-alts(node);
	##
		<err-expected-alts>;
		node = <ast-make-empty>;
	};

	re_sql: () -> (node :ast_expr) = {
		{
			node = expr;
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_sql;

