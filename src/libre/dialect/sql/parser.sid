/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * ISO/IEC 9075-2:1999 (E) Â©ISO/IEC
 * 8.6 <similar predicate>
 *
 * https://firebirdsql.org/refdocs/langrefupd25-similar-to.html
 *
 * TODO: SQL99 permits an arbitrary optional escape character
 */

%types%

	pos;
	char;
	unsigned;
	!re_flags;
	!err;
	ast_expr;
	ast_count;
	ast_class_id;
	ast_class;
	endpoint;

%terminals%

	ANY;
	MANY;
	OPT;
	PLUS;
	ALT;
	STAR;

	!START;
	!END;

	OPENSUB;   CLOSESUB;
	OPENGROUP:  () -> (:pos, :pos); CLOSEGROUP:  () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos);
	COUNT: () -> (:unsigned);
	SEP;
	CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);

	EOF;
	!ERROR;

%productions%

	!<re-flag-none>:  ()                     -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	<atom-kleene>: () -> (:ast_count);
	<atom-plus>:   () -> (:ast_count);
	<atom-one>:    () -> (:ast_count);
	<atom-opt>:    () -> (:ast_count);
	<atom-count>:  (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	!<unbounded-count>:	() -> (:unsigned);

	<ast-range-endpoint-literal>: (:char)         -> (:endpoint);
	!<ast-range-endpoint-class>:  (:ast_class_id) -> (:endpoint);
	!<ast-range-distinct>: (:endpoint, :pos, :endpoint, :pos) -> ();

	<ast-make-expr-empty>:         ()                       -> (:ast_expr);
	<ast-make-expr-literal>:       (:char)                  -> (:ast_expr);
	<ast-make-expr-concat>:        ()                       -> (:ast_expr);
	<ast-make-expr-alt>:           ()                       -> (:ast_expr);
	!<ast-make-expr-any>:          ()                       -> (:ast_expr);
	<ast-make-expr-atom>:          (:ast_expr, :ast_count)  -> (:ast_expr);
	<ast-make-expr-atom-any>:      (:ast_count)             -> (:ast_expr);
	<ast-make-expr-class>:         (:ast_class, :pos, :pos) -> (:ast_expr);
	<ast-make-expr-group>:         (:ast_expr)              -> (:ast_expr);
	!<ast-make-expr-re-flags>:     (:re_flags, :re_flags)   -> (:ast_expr);
	!<ast-make-expr-anchor-start>: ()                       -> (:ast_expr);
	!<ast-make-expr-anchor-end>:   ()                       -> (:ast_expr);

	<ast-add-expr-concat>: (:ast_expr, :ast_expr) -> ();
	<ast-add-expr-alt>:    (:ast_expr, :ast_expr) -> ();

	<ast-make-class-concat>:       ()                       -> (:ast_class);
	<ast-make-class-literal>:      (:char)                  -> (:ast_class);
	<ast-make-class-range>:        (:endpoint, :pos, :endpoint, :pos) -> (:ast_class);
	<ast-make-class-named>:        (:ast_class_id)          -> (:ast_class);
	<ast-make-class-subtract>:     (:ast_class, :ast_class) -> (:ast_class);

	<ast-make-class-flag-none>:    () -> (:ast_class);
	<ast-make-class-flag-invert>:  () -> (:ast_class);
	<ast-make-class-flag-minus>:   () -> (:ast_class);
	<ast-make-class-flag-invert-minus>: () -> (:ast_class);

	<ast-add-class-concat>: (:ast_class, :ast_class) -> ();

	<err-expected-term>;
	!<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	!<err-expected-range>;
	<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;
	<err-unsupported>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();

	expr: () -> (node :ast_expr) [
		literal: () -> (node :ast_expr) = {
  			(c, !, !) = CHAR;
			node = <ast-make-expr-literal>(c);
  		};

		atom-suffix: () -> (f :ast_count) = {
			STAR;
			f = <atom-kleene>();
		||
			PLUS;
			f = <atom-plus>();
		||
			OPT;
			f = <atom-opt>();
		||
			(pos_of, pos_ot) = OPENCOUNT;
			m = COUNT;
			(pos_cf, pos_ct) = CLOSECOUNT;
			<mark-count>(pos_of, pos_ct);
			f = <atom-count>(m, pos_of, m, pos_ct);
		||
			(pos_of, pos_ot) = OPENCOUNT;
			m = COUNT;
			SEP;
			n = COUNT;
			(pos_cf, pos_ct) = CLOSECOUNT;
			<mark-count>(pos_of, pos_ct);
			f = <atom-count>(m, pos_of, n, pos_ct);
		||
			f = <atom-one>();
		};

		/*
		 * [abc] -> when it reaches the end, make an empty class, and
		 * each character literal / named class / etc. modifies it.
		 *
		 * in the case of the SQL dialect's wonky [abc^def], it should
		 * create two groups, and then remove anything from the former
		 * that is in the latter.
		 *
		 * [abc] literals
		 * [a-c] range
		 * [-^] characters only allowed at the head
		 * [-] also allowed at the tail (just [-] is ambiguous)
		 * [[:NAME:]] named character classes
		 *
		 * TODO: describe [abc^xyz]
		 *
		 * _ is the ANY character class
		 */
		character-class: () -> (node :ast_expr) [

			class-head: (class :ast_class) -> () = {
				! = INVERT;
				f = <ast-make-class-flag-invert>();
				<ast-add-class-concat>(class, f);
			||
				(!, !, !) = RANGE;
				f = <ast-make-class-flag-minus>();
				<ast-add-class-concat>(class, f);
			||
				! = INVERT;
				(!, !, !) = RANGE;
				f = <ast-make-class-flag-invert-minus>();
				<ast-add-class-concat>(class, f);
			||
				/* XXX: why add a node at all? */
				f = <ast-make-class-flag-none>();
				<ast-add-class-concat>(class, f);
			};

			class-tail: (class :ast_class) -> () = {
				/* XXX: This requires LL(2). */

			/* 	(!, !, !) = RANGE;
			 * 	f = <ast-make-class-flag-minus>();
			 * || */
				/* XXX: why add a node at all? */
				f = <ast-make-class-flag-none>();
				<ast-add-class-concat>(class, f);
			};

			named-class: () -> (node :ast_class) = {
				(id, !, !) = NAMED_CLASS;
				node = <ast-make-class-named>(id);
			};

			term: () -> (node :ast_class) = {
				(ca, start, !) = CHAR;
				a = <ast-range-endpoint-literal>(ca);

				(!, !, !) = RANGE;

				(cz, !, end) = CHAR;
				z = <ast-range-endpoint-literal>(cz);

				<mark-range>(start, end);
				node = <ast-make-class-range>(a, start, z, end);
			||
				(c, !, !) = CHAR;
				node = <ast-make-class-literal>(c);
			||
				node = named-class();
			};

			list-of-class-terms: (class :ast_class) -> () = {
				{
					node = term();
					<ast-add-class-concat>(class, node);
				##
					<err-expected-term>;
				};

				{
					list-of-class-terms(class);
				||
					$;
				};
			};

		] = {
			(start, !) = OPENGROUP;

			class = <ast-make-class-concat>;

			class-head(class);
			list-of-class-terms(class);
			class-tail(class);

			{
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
				end = start; /* appease sid */
			};

			node = <ast-make-expr-class>(class, start, end);
		||
			(start, !) = OPENGROUP;

			class = <ast-make-class-concat>;

			class-head(class);
			list-of-class-terms(class);
			class-tail(class);

			! = INVERT;

			mask = <ast-make-class-concat>;

			class-head(mask);
			list-of-class-terms(mask);
			class-tail(mask);

			{
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
				end = start; /* appease sid */
			};

			/* Marking this unsupported for now */
			<err-unsupported>;

			sub = <ast-make-class-subtract>(class, mask);
			node = <ast-make-expr-class>(sub, start, end);
		};

		/* TODO: is there a better name than 'atom' for
		 * this construct? it isn't atomic... */
		atom: () -> (node :ast_expr) = {
			OPENSUB;
			g = expr();
			e = <ast-make-expr-group>(g);
			CLOSESUB;
			s = atom-suffix();
			node = <ast-make-expr-atom>(e, s);
		||
			e = character-class();
			s = atom-suffix();
			node = <ast-make-expr-atom>(e, s);
		||
			e = literal();
			s = atom-suffix();
			node = <ast-make-expr-atom>(e, s);
		||
			ANY;
			s = atom-suffix();
			node = <ast-make-expr-atom-any>(s);
		||
			MANY;
			s = atom-suffix();
			f = <atom-kleene>();
			e = <ast-make-expr-atom-any>(f);
			node = <ast-make-expr-atom>(e, s);
		};

		list-of-atoms: (cat :ast_expr) -> () = {
			a = atom();

			<ast-add-expr-concat>(cat, a);

			{
				list-of-atoms(cat);
			||
				$;
			};
		};

		alt: () -> (node :ast_expr) = {
			node = <ast-make-expr-concat>;
			list-of-atoms(node);
		||
			/* explcitly allow an empty alt */
			node = <ast-make-expr-empty>;
		};

		list-of-alts: (alts :ast_expr) -> () = {
			a = alt();
			<ast-add-expr-alt>(alts, a);

			{
				ALT;

				list-of-alts(alts);
			||
				$;
			};
		##
			<err-expected-alts>;
		};

	] = {
		node = <ast-make-expr-alt>;
		list-of-alts(node);
	##
		<err-expected-alts>;
		node = <ast-make-expr-empty>;
	};

	re_sql: () -> (node :ast_expr) = {
		{
			node = expr();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_sql;

