/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	pos;
	char;
	!unsigned;
	!re_flags;
	!err;
	ast_expr;
	ast_count;
	ast_class_id;
	!endpoint;
	!group_id;

%terminals%

	ANY;
	MANY;
	!EOL;
	!OPT;
	!PLUS;
	!ALT;
	!SEP;
	!STAR;

	!START;
	!END;
	!END_NL;

	!OPENSUB;   !CLOSESUB;
	!OPENGROUP: () -> (:pos, :pos); !CLOSEGROUP: () -> (:char, :pos, :pos);
	!OPENCOUNT: () -> (:pos, :pos); !CLOSECOUNT: () -> (:pos, :pos);

	!OPENGROUPINV: () -> (:pos, :pos);
	!OPENGROUPCB: () -> (:pos, :pos);
	!OPENGROUPINVCB: () -> (:pos, :pos);
	!CLOSEGROUPRANGE: () -> (:char, :pos, :pos);

	!INVERT: () -> (:char);
	!RANGE:  () -> (:char, :pos, :pos);

	!NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_IGNORE;
	!FLAG_UNKNOWN;
	!FLAG_EXTENDED: () -> (:re_flags);
	!FLAG_SINGLE: () -> (:re_flags);
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!WHITESPACE: () -> (:char, :pos, :pos);
	!NEWLINE: () -> (:char, :pos, :pos);
	!MAYBE_COMMENT: () -> (:char, :pos, :pos);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);
	!COUNT:   () -> (:unsigned);

	!UNSUPPORTED:     () -> (:char, :pos, :pos);

	EOF;
	!ERROR;

%productions%

	!<re-flag-none>:  ()                     -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	!<count-unbounded>:	  () -> (:unsigned);
	<count-zero-or-more>: () -> (:ast_count);
	!<count-one-or-more>: () -> (:ast_count);
	!<count-zero-or-one>: () -> (:ast_count);
	!<count-one>:         () -> (:ast_count);
	!<count-range>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	!<make-group-id>:      () -> (:group_id);
	!<make-literal-cbrak>: () -> (:char);
	!<make-literal-cr>:    () -> (:char);
	!<make-literal-nl>:    () -> (:char);

	!<ast-range-endpoint-literal>: (:char)         -> (:endpoint);
	!<ast-range-endpoint-class>:   (:ast_class_id) -> (:endpoint);

	<ast-make-empty>:         ()                       -> (:ast_expr);
	<ast-make-literal>:       (:char)                  -> (:ast_expr);
	<ast-make-concat>:        ()                       -> (:ast_expr);
	!<ast-make-alt>:          ()                       -> (:ast_expr);
	<ast-make-piece>:         (:ast_expr, :ast_count)  -> (:ast_expr);
	!<ast-make-group>:        (:ast_expr, :group_id)   -> (:ast_expr);
	!<ast-get-re-flags>:      ()                       -> (:re_flags);
	!<ast-set-re-flags>:      (:re_flags)              -> ();
	!<ast-mask-re-flags>:     (:re_flags, :re_flags)   -> ();
	!<ast-make-anchor-start>: ()                       -> (:ast_expr);
	!<ast-make-anchor-end>:   ()                       -> (:ast_expr);
	!<ast-make-anchor-end-nl>: ()                     -> (:ast_expr);
	!<ast-make-subtract>:     (:ast_expr, :ast_expr)   -> (:ast_expr); 
	!<ast-make-invert>:       (:ast_expr)              -> (:ast_expr); 
	!<ast-make-range>:        (:endpoint, :pos, :endpoint, :pos) -> (:ast_expr);
	<ast-make-named>:         (:ast_class_id)          -> (:ast_expr);

	<ast-add-concat>: (:ast_expr, :ast_expr) -> ();
	!<ast-add-alt>:   (:ast_expr, :ast_expr) -> ();

	!<err-expected-term>;
	!<err-expected-count>;
	<err-expected-atom>;
	!<err-expected-alts>;
	!<err-expected-range>;
	!<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;
	!<err-unsupported>;
	!<err-invalid-comment>;

	!<mark-group>: (:pos, :pos) -> ();
	!<mark-range>: (:pos, :pos) -> ();
	!<mark-count>: (:pos, :pos) -> ();
	!<mark-expr>: (:ast_expr, :pos, :pos) -> ();

	<class-any>:  () -> (:ast_class_id);
	!<class-bsr>: () -> (:ast_class_id);

	list-of-atoms: (cat :ast_expr) -> () [

		atom: () -> (e :ast_expr) = {
			(c, !, !) = CHAR;
			e = <ast-make-literal>(c);
		||
			ANY;
			a = <class-any>;
			e = <ast-make-named>(a);
		||
			MANY;
			a = <class-any>;
			g = <ast-make-named>(a);
			c = <count-zero-or-more>;
			e = <ast-make-piece>(g, c);
		##
			<err-expected-atom>;
			e = <ast-make-empty>;
		};

	] = {
		a = atom;
		<ast-add-concat>(cat, a);

		{
			list-of-atoms(cat);
		||
			$;
		};
	};

	re_glob: () -> (node :ast_expr) = {
		{
			node = <ast-make-concat>;
			list-of-atoms(node);
		||
			node = <ast-make-empty>;
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_glob;

