/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = TOK_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;

%maps%

	arr    -> arr;
	char   -> char;
	flags  -> flags;
	string -> string;
	fsm    -> fsm;
	zone   -> zone;
	ast    -> ast;

%header% @{

	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdarg.h>
	#include <stdio.h>
	#include <errno.h>

	#include <adt/xalloc.h>

	#include <fsm/fsm.h>
	#include <fsm/bool.h>
	#include <fsm/pred.h>
	#include <fsm/options.h>

	#include <re/re.h>

	#include "libfsm/internal.h"

	#include "lexer.h"
	#include "parser.h"
	#include "ast.h"
	#include "print.h"
	#include "var.h"

	struct arr {
		char *p;
		size_t len;
	};

	typedef struct arr *         arr;
	typedef char *               string;
	typedef enum re_flags        flags;
	typedef struct fsm *         fsm;
	typedef struct ast_zone *    zone;
	typedef struct ast_mapping * mapping;

	static unsigned int nmappings;

	struct act_state {
		enum lx_token lex_tok;
		enum lx_token lex_tok_save;
		unsigned int zn;
		const struct fsm_options *opt;
	};

	struct lex_state {
		struct lx lx;
		struct lx_dynbuf buf;

		char a[512];
		char *p;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   TOK_UNKNOWN
	#define ADVANCE_LEXER    do { act_state->lex_tok = lx_next(&lex_state->lx); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	static void
	err(const struct lex_state *lex_state, const char *fmt, ...)
	{
		va_list ap;

		assert(lex_state != NULL);

		va_start(ap, fmt);
		fprintf(stderr, "%u:%u: ",
			lex_state->lx.start.line, lex_state->lx.start.col);
		vfprintf(stderr, fmt, ap);
		fprintf(stderr, "\n");
		va_end(ap);
	}

	static void
	err_expected(const struct lex_state *lex_state, const char *token)
	{
		err(lex_state, "Syntax error: expected %s", token);
		exit(EXIT_FAILURE);
	}

	static int
	act_agetc(void *opaque)
	{
		struct arr *a;

		a = opaque;

		assert(a != NULL);
		assert(a->p != NULL);

		if (a->len == 0) {
			return EOF;
		}

		return a->len--, (unsigned char) *a->p++;
	}

@}, @{

	#include <stdio.h>

	#include "ast.h"

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;
	typedef struct ast *       ast;

	struct ast *lx_parse(FILE *f, const struct fsm_options *opt);

@};

%terminals%

	ESC: () -> (c :char) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] != '\0');
		assert(lex_state->buf.a[2] == '\0');

		switch (lex_state->buf.a[1]) {
		case '\\': @c = '\\'; break;
		case '\"': @c = '\"'; break;
		case 'f':  @c = '\f'; break;
		case 'n':  @c = '\n'; break;
		case 'r':  @c = '\r'; break;
		case 't':  @c = '\t'; break;
		case 'v':  @c = '\v'; break;

		default:   @c = '\0'; break; /* TODO: handle error */
		}
	@};

	OCT: () -> (c :char) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(strlen(lex_state->buf.a) >= 2);

		errno = 0;

		u = strtoul(lex_state->buf.a + 1, &e, 8);
		assert(*e == '\0');

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err(lex_state, "octal escape %s out of range: expected \\0..\\%o inclusive",
				lex_state->buf.a, UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err(lex_state, "%s: %s: expected \\0..\\%o inclusive",
				lex_state->buf.a, strerror(errno), UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		@c = (char) (unsigned char) u;
	@};

	HEX: () -> (c :char) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\x", 2));
		assert(strlen(lex_state->buf.a) >= 3);

		errno = 0;

		u = strtoul(lex_state->buf.a + 2, &e, 16);
		assert(*e == '\0');

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err(lex_state, "hex escape %s out of range: expected \\x0..\\x%x inclusive",
				lex_state->buf.a, UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err(lex_state, "%s: %s: expected \\x0..\\x%x inclusive",
				lex_state->buf.a, strerror(errno), UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		@c = (char) (unsigned char) u;
	@};

	CHAR: () -> (c :char) = @{
		assert(lex_state->buf.a[0] != '\0');
		assert(lex_state->buf.a[1] == '\0');

		@c = lex_state->buf.a[0];
	@};

	TOKEN: () -> (s :string) = @{
		/* TODO: submatch addressing */
		@s = xstrdup(lex_state->buf.a + 1); /* +1 for '$' prefix */
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

	IDENT: () -> (s :string) = @{
		@s = xstrdup(lex_state->buf.a);
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

	RE: () -> (f :flags) = @{
		assert(lex_state->buf.a[0] == '/');

		/* TODO: submatch addressing */

		if (-1 == re_flags(lex_state->buf.a + 1, &@f)) { /* TODO: +1 for '/' prefix */
			err(lex_state, "/%s: Unrecognised regexp flags", lex_state->buf.a + 1);
			exit(EXIT_FAILURE);
		}

		@f |= RE_ANCHORED; /* regexps in lx are implicitly anchored */
	@};

%actions%

	<pattern-char>: (c :char) -> () = @{
		/* TODO */
		*lex_state->p++ = @c;
	@};

	<pattern-buffer>: () -> (a :arr) = @{
		size_t len;

		/*
		 * Note we copy the string here because the grammar permits adjacent
		 * patterns; the pattern buffer will be overwritten by the LL(1) one-token
		 * lookahead.
		 */

		len = lex_state->p - lex_state->a;

		@a = malloc(sizeof *@a + len);
		if (@a == NULL) {
			perror("malloc");
			exit(EXIT_FAILURE);
		}

		@a->len = len;
		@a->p   = (char *) @a + sizeof *@a;

		memcpy(@a->p, lex_state->a, @a->len);

		lex_state->p = lex_state->a;
	@};

	<deref-var>: (z :zone, s :string) -> (r :fsm) = @{
		struct ast_zone *z;

		assert(@z != NULL);
		assert(@s != NULL);

		for (z = @z; z != NULL; z = z->parent) {
			@r = var_find(z->vl, @s);
			if (@r != NULL) {
				break;
			}

			if (@z->parent == NULL) {
				/* TODO: use *err */
				err(lex_state, "No such variable: %s", @s);
				@!;
			}
		}

		@r = fsm_clone(@r);
		if (@r == NULL) {
			/* TODO: use *err */
			perror("fsm_clone");
			@!;
		}
	@};

	<deref-token>: (z :zone, t :string) -> (r :fsm) = @{
		const struct ast_mapping *m;
		fsm_state_t start;

		assert(@t != NULL);
		assert(@t != NULL);

		@r = fsm_new(act_state->opt);
		if (@r == NULL) {
			perror("fsm_new");
			@!;
		}

		if (!fsm_addstate(@r, &start)) {
			perror("fsm_addstate");
			@!;
		}

		for (m = @z->ml; m != NULL; m = m->next) {
			struct fsm *fsm;
			fsm_state_t base_r, base_fsm;
			fsm_state_t ms;

			if (m->token == NULL) {
				continue;
			}

			if (0 != strcmp(m->token->s, @t)) {
				continue;
			}

			fsm = fsm_clone(m->fsm);
			if (fsm == NULL) {
				perror("fsm_clone");
				@!;
			}

			(void) fsm_getstart(fsm, &ms);

			/*
			 * We don't want to take these with us, because the output here is a
			 * general-purpose FSM for which no mapping has yet been made,
			 * so that it can be used in expressions as for any pattern.
			 */
			fsm_setendopaque(fsm, NULL);

			@r = fsm_merge(@r, fsm, &base_r, &base_fsm);
			if (@r == NULL) {
				perror("fsm_union");
				@!;
			}

			ms    += base_fsm;
			start += base_r;

			if (!fsm_addedge_epsilon(@r, start, ms)) {
				perror("fsm_addedge_epsilon");
				@!;
			}
		}

		fsm_setstart(@r, start);
	@};

	<compile-literal>: (a :arr) -> (r :fsm) = @{
		struct re_err err;

		assert(@a != NULL);
		assert(@a->p != NULL);

		@r = re_comp_new(RE_LITERAL, act_agetc, @a, act_state->opt, 0, &err);
		if (@r == NULL) {
			assert(err.e != RE_EBADDIALECT);
			/* TODO: pass filename for .lx source */
			re_perror(RE_LITERAL, &err, NULL, @a->p); /* XXX */
			exit(EXIT_FAILURE);
		}
	@};

	<compile-regex>: (a :arr, f :flags) -> (r :fsm) = @{
		struct re_err err;

		assert(@a != NULL);
		assert(@a->p != NULL);

		@r = re_comp_new(RE_NATIVE, act_agetc, @a, act_state->opt, @f, &err);
		if (@r == NULL) {
			assert(err.e != RE_EBADDIALECT);
			/* TODO: pass filename for .lx source */
			re_perror(RE_NATIVE, &err, NULL, @a->p);
			exit(EXIT_FAILURE);
		}
	@};

	/* equivalent to <compile-regex>(".") but with less machination */
	<regex-any>: () -> (r :fsm) = @{
		fsm_state_t start, end;

		@r = fsm_new(act_state->opt);
		if (@r == NULL) {
			perror("fsm_new");
			@!;
		}

		if (!fsm_addstate(@r, &start)) {
			perror("fsm_addstate");
			fsm_free(@r);
			@!;
		}

		if (!fsm_addstate(@r, &end)) {
			perror("fsm_addstate");
			fsm_free(@r);
			@!;
		}

		if (!fsm_addedge_any(@r, start, end)) {
			perror("fsm_addedge_any");
			fsm_free(@r);
			@!;
		}

		fsm_setstart(@r, start);
		fsm_setend(@r, end, 1);
	@};

	<make-ast>: () -> (a :ast) = @{
		@a = ast_new();
		if (@a == NULL) {
			perror("ast_new");
			@!;
		}
	@};

	<make-zone>: (a :ast, parent :zone) -> (z :zone) = @{
		assert(@a != NULL);

		if (print_progress) {
			nmappings = 0;
			if (important(act_state->zn)) {
				fprintf(stderr, " z%u", act_state->zn);
			}
			act_state->zn++;
		}

		@z = ast_addzone(@a, @parent);
		if (@z == NULL) {
			perror("ast_addzone");
			@!;
		}
	@};

	<add-mapping>: (a :ast, from :zone, to :zone, r :fsm, t :string) -> () = @{
		struct ast_token *t;
		struct ast_mapping *m;

		assert(@a != NULL);
		assert(@from != NULL);
		assert(@from != @to);
		assert(@r != NULL);

		if (@t != NULL) {
			t = ast_addtoken(@a, @t);
			if (t == NULL) {
				perror("ast_addtoken");
				@!;
			}
		} else {
			t = NULL;
		}

		m = ast_addmapping(@from, @r, t, @to);
		if (m == NULL) {
			perror("ast_addmapping");
			@!;
		}

		if (print_progress) {
			if (important(nmappings)) {
				fprintf(stderr, " m%u", nmappings);
			}
			nmappings++;
		}
	@};

	<add-binding>: (a :ast, z :zone, n :string, r :fsm) -> () = @{
		struct var *v;

		assert(@a != NULL);
		assert(@z != NULL);
		assert(@r != NULL);
		assert(@n != NULL);

		(void) @a;

		v = var_bind(&@z->vl, @n, @r);
		if (v == NULL) {
			perror("var_bind");
			@!;
		}
	@};

	<set-globalzone>: (a :ast, z :zone) -> () = @{
		assert(@a != NULL);
		assert(@z != NULL);

		@a->global = @z;
	@};

	<no-token>: () -> (s :string) = @{
		@s = NULL;
	@};

	<no-exit>: () -> (r :fsm) = @{
		@r = NULL;
	@};

	<no-zone>: () -> (z :zone) = @{
		@z = NULL;
	@};

	<op-star>: (r :fsm) -> () = @{
		fsm_state_t start, end;
		fsm_state_t old;
		fsm_state_t rs;

		/* TODO: centralise with libre */

		if (!fsm_addstate(@r, &start)) {
			perror("fsm_addtstate");
			@!;
		}

		if (!fsm_addstate(@r, &end)) {
			perror("fsm_addtstate");
			@!;
		}

		if (!fsm_collate(@r, &old, fsm_isend)) {
			perror("fsm_collate");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, old, end)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		fsm_setend(@r, old, 0);
		fsm_setend(@r, end, 1);

		(void) fsm_getstart(@r, &rs);

		if (!fsm_addedge_epsilon(@r, start, rs)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, start, end)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, end, start)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		fsm_setstart(@r, start);
	@};

	<op-cross>: (r :fsm) -> () = @{
		fsm_state_t start, end;
		fsm_state_t old;
		fsm_state_t rs;

		/* TODO: centralise with libre */

		if (!fsm_addstate(@r, &start)) {
			perror("fsm_addtstate");
			@!;
		}

		if (!fsm_addstate(@r, &end)) {
			perror("fsm_addtstate");
			@!;
		}

		if (!fsm_collate(@r, &old, fsm_isend)) {
			perror("fsm_collate");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, old, end)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		fsm_setend(@r, old, 0);
		fsm_setend(@r, end, 1);

		(void) fsm_getstart(@r, &rs);

		if (!fsm_addedge_epsilon(@r, start, rs)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, end, start)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		fsm_setstart(@r, start);
	@};

	<op-qmark>: (r :fsm) -> () = @{
		fsm_state_t start, end;
		fsm_state_t old;
		fsm_state_t rs;

		/* TODO: centralise with libre */

		if (!fsm_addstate(@r, &start)) {
			perror("fsm_addtstate");
			@!;
		}

		if (!fsm_addstate(@r, &end)) {
			perror("fsm_addtstate");
			@!;
		}

		if (!fsm_collate(@r, &old, fsm_isend)) {
			perror("fsm_collate");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, old, end)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		fsm_setend(@r, old, 0);
		fsm_setend(@r, end, 1);

		(void) fsm_getstart(@r, &rs);

		if (!fsm_addedge_epsilon(@r, start, rs)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		if (!fsm_addedge_epsilon(@r, start, end)) {
			perror("fsm_addedge_epsilon");
			@!;
		}

		fsm_setstart(@r, start);
	@};

	<op-complement>: (r :fsm) -> () = @{
		assert(@r != NULL);

		if (!fsm_complement(@r)) {
			perror("fsm_complement");
			@!;
		}
	@};

	<op-complete>: (r :fsm) -> () = @{
		assert(@r != NULL);

		if (!fsm_complete(@r, fsm_isany)) {
			perror("fsm_complete");
			@!;
		}
	@};

	<op-reverse>: (r :fsm) -> () = @{
		assert(@r != NULL);

		if (!fsm_reverse(@r)) {
			perror("fsm_reverse");
			@!;
		}
	@};

	<op-concat>: (a :fsm, b :fsm) -> (q :fsm) = @{
		assert(@a != NULL);
		assert(@b != NULL);

		@q = fsm_concat(@a, @b);
		if (@q == NULL) {
			perror("fsm_concat");
			@!;
		}
	@};

	<op-product>: (a :fsm, b :fsm) -> (q :fsm) = @{
		fprintf(stderr, "unimplemented\n");
		@q = NULL;
		@!;
	@};

	<op-subtract>: (a :fsm, b :fsm) -> (q :fsm) = @{
		assert(@a != NULL);
		assert(@b != NULL);

		@q = fsm_subtract(@a, @b);
		if (@q == NULL) {
			perror("fsm_subtract");
			@!;
		}
	@};

	<op-intersect>: (a :fsm, b :fsm) -> (q :fsm) = @{
		assert(@a != NULL);
		assert(@b != NULL);

		@q = fsm_intersect(@a, @b);
		if (@q == NULL) {
			perror("fsm_intersect");
			@!;
		}
	@};

	<op-alt>: (a :fsm, b :fsm) -> (q :fsm) = @{
		assert(@a != NULL);
		assert(@b != NULL);

		@q = fsm_union(@a, @b);
		if (@q == NULL) {
			perror("fsm_union");
			@!;
		}
	@};

	<subtract-exit>: (a :fsm, b :fsm) -> (q :fsm) = @{
		assert(@a != NULL);

		if (@b == NULL) {
			@q = @a;
		} else {
			@b = fsm_clone(@b);
			if (@b == NULL) {
				perror("fsm_clone");
				@!;
			}

			@q = fsm_subtract(@a, @b);
			if (@q == NULL) {
				perror("fsm_subtract");
				@!;
			}
		}
	@};

	<clone>: (r :fsm) -> (q :fsm) = @{
		assert(@r != NULL);

		@q = fsm_clone(@r);
		if (@q == NULL) {
			perror("fsm_clone");
			@!;
		}
	@};

	<free-arr>: (a :arr) -> () = @{
		free(@a);
	@};

	<free-string>: (s :string) -> () = @{
		free(@s);
	@};

	<err-syntax> = @{
		err(lex_state, "Syntax error");
		exit(EXIT_FAILURE);
	@};

	<err-expected-alt> = @{
		err_expected(lex_state, "'|'");
	@};

	<err-expected-map> = @{
		err_expected(lex_state, "'->'");
	@};

	<err-expected-bind> = @{
		err_expected(lex_state, "'='");
	@};

	<err-expected-semi> = @{
		err_expected(lex_state, "';'");
	@};

	<err-expected-to> = @{
		err_expected(lex_state, "'..'");
	@};

	<err-expected-open> = @{
		err_expected(lex_state, "'{'");
	@};

	<err-expected-close> = @{
		err_expected(lex_state, "'}'");
	@};

	<err-expected-eof> = @{
		err_expected(lex_state, "EOF");
	@};

	<err-expected-thing> = @{
		err_expected(lex_state, "mapping, binding or zone");
	@};

	<err-expected-list> = @{
		err_expected(lex_state, "list of mappings, bindings or zones");
	@};

%trailer% @{

	struct ast *lx_parse(FILE *f, const struct fsm_options *opt) {
		struct act_state act_state_s;
		struct act_state *act_state;
		struct lex_state lex_state_s;
		struct lex_state *lex_state;
		struct ast *ast;
		struct lx *lx;

		assert(f != NULL);

		lex_state = &lex_state_s;

		lex_state->p = lex_state->a;

		lx = &lex_state->lx;

		lx_init(lx);

		lx->lgetc       = lx_fgetc;
		lx->getc_opaque = f;

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		lx->buf_opaque = &lex_state->buf;
		lx->push       = lx_dynpush;
		lx->clear      = lx_dynclear;
		lx->free       = lx_dynfree;

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		act_state->opt = opt;

		if (print_progress) {
			act_state->zn = 0;
		}

		ADVANCE_LEXER;	/* XXX: what if the first token is unrecognised? */
		p_lx(lex_state, act_state, &ast);

		lx->free(lx->buf_opaque);

		assert(ast != NULL);

		return ast;
	}

@}, @{

@};

