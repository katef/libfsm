---
name: CI
on: [ push, pull_request ]
jobs:
  checkout:
    name: "checkout"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache checkout
      uses: actions/cache@v3
      env:
        cache-name: cache-checkout
      with:
        path: .
        key: ${{ github.sha }}

  build:
    name: "${{ matrix.san }} ${{ matrix.cc }} ${{ matrix.os }} ${{ matrix.debug }}"
    runs-on: ${{ matrix.os }}-latest
    needs: [checkout]

    strategy:
      fail-fast: true
      matrix:
        san: [ NO_SANITIZER, ASAN, UBSAN, MSAN, EFENCE ] # NO_SANITIZER=1 is a no-op
        os: [ ubuntu ]
        cc: [ clang, gcc ]
        make: [ bmake ] # we test makefiles separately
        debug: [ DEBUG, RELEASE ] # RELEASE=1 is a no-op
        exclude:
          - os: macos
            cc: gcc # it's clang anyway
          - os: macos
            san: EFENCE # not packaged
          - os: macos
            san: MSAN # not supported
          - os: macos
            make: pmake # not packaged

    steps:
    - name: Fetch checkout
      uses: actions/cache@v3
      id: cache-checkout
      with:
        path: .
        key: ${{ github.sha }}

    - name: Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu'
      run: |
        uname -a
        sudo apt-get install bmake pcregrep electric-fence
        ${{ matrix.cc }} --version

    - name: Dependencies (MacOS)
      if: matrix.os == 'macos'
      run: |
        uname -a
        brew update
        brew install bmake pcre
        ${{ matrix.cc }} --version

    - name: Cache build
      uses: actions/cache@v3
      env:
        cache-name: cache-build
      with:
        path: build
        key: ${{ matrix.make }}-${{ matrix.os }}-${{ matrix.cc }}-${{ matrix.debug }}-${{ matrix.san }}-${{ github.sha }}

    - name: Make
      run: |
        # note: lexer.h first, because parser.? depends on it
        find . -name 'lexer.?' -exec touch '{}' \; # workaround for git checkout timestamps
        find . -name 'parser.?' -exec touch '{}' \; # workaround for git checkout timestamps
        ${{ matrix.make }} -r -j 2 ${{ matrix.san }}=1 ${{ matrix.debug }}=1 PKGCONF=pkg-config CC=${{ matrix.cc }}

  # testing different bmake dialects
  # the goal here is to excercise the build system, not the code
  # we don't care about e.g. different compilers here
  makefiles:
    name: "${{ matrix.make }} ${{ matrix.os }} ${{ matrix.debug }}"
    runs-on: ${{ matrix.os }}-latest
    needs: [checkout]

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu ]
        cc: [ clang ]
        make: [ bmake, pmake ]
        debug: [ DEBUG, RELEASE ] # RELEASE=1 is a no-op
        exclude:
          - os: macos
            make: pmake # not packaged
    
    steps:
    - name: Fetch checkout
      uses: actions/cache@v3
      id: cache-checkout
      with:
        path: .
        key: ${{ github.sha }}

    - name: Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu'
      run: |
        uname -a
        sudo apt-get install pmake bmake pcregrep
        ${{ matrix.cc }} --version

    - name: Dependencies (MacOS)
      if: matrix.os == 'macos'
      run: |
        uname -a
        brew update
        brew install bmake pcre
        ${{ matrix.cc }} --version

    - name: Make
      run: |
        # note: lexer.h first, because parser.? depends on it
        find . -name 'lexer.?' -exec touch '{}' \; # workaround for git checkout timestamps
        find . -name 'parser.?' -exec touch '{}' \; # workaround for git checkout timestamps
        ${{ matrix.make }} -r -j 2 ${{ matrix.debug }}=1 PKGCONF=pkg-config CC=${{ matrix.cc }}

    - name: Test
      # I don't want to build SID just for sake of its -l test
      # Same for lx
      run: ${{ matrix.make }} -r -j 2 ${{ matrix.debug }}=1 PKGCONF=pkg-config SID='true; echo sid' LX='true; echo lx' CC=${{ matrix.cc }} test

    - name: Install
      run: ${{ matrix.make }} -r -j 2 ${{ matrix.debug }}=1 PKGCONF=pkg-config PREFIX=/tmp/p-${{ matrix.debug }} install

  test:
    name: "${{ matrix.san }} ${{ matrix.cc }} ${{ matrix.os }} ${{ matrix.debug }}"
    runs-on: ${{ matrix.os }}-latest
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        san: [ ASAN, UBSAN, MSAN, EFENCE ]
        os: [ ubuntu ]
        cc: [ clang, gcc ]
        make: [ bmake ]
        debug: [ DEBUG, RELEASE ] # RELEASE=1 is a no-op
        exclude:
          - os: macos
            cc: gcc # it's clang anyway
          - os: macos
            san: EFENCE # not packaged
          - os: macos
            san: MSAN # not supported

    steps:
    - name: Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu'
      run: |
        uname -a
        sudo apt-get install bmake pcregrep electric-fence
        ${{ matrix.cc }} --version

    - name: Dependencies (MacOS)
      if: matrix.os == 'macos'
      run: |
        uname -a
        brew update
        brew install bmake pcre
        ${{ matrix.cc }} --version

    - name: Fetch checkout
      uses: actions/cache@v3
      id: cache-checkout
      with:
        path: .
        key: ${{ github.sha }}

    - name: Fetch build
      uses: actions/cache@v3
      id: cache-build
      with:
        path: build
        key: ${{ matrix.make }}-${{ matrix.os }}-${{ matrix.cc }}-${{ matrix.debug }}-${{ matrix.san }}-${{ github.sha }}

    - name: Test
      env:
        EF_DISABLE_BANNER: 1
      # I don't want to build SID just for sake of its -l test
      run: ${{ matrix.make }} -r -j 2 ${{ matrix.san }}=1 ${{ matrix.debug }}=1 PKGCONF=pkg-config SID='true; echo sid' CC=${{ matrix.cc }} LX=./build/bin/lx test

    - name: Fetch pcre test suite
      env:
        PCRE_VER: pcre2-10.39
        BUILD: ./build
      run: |
        wget -nv -P ${BUILD}/ https://github.com/PhilipHazel/pcre2/releases/download/${PCRE_VER}/${PCRE_VER}.zip
        unzip -d ${BUILD}/ ${BUILD}/${PCRE_VER}.zip "${PCRE_VER}/testdata/*"
        mkdir -p ${BUILD}/test/retest
        # the regexps skipped here take too long to compile in CI at the moment
        for i in $(cd ${BUILD}/${PCRE_VER}/testdata; ls -1 testinput*); do
            ${BUILD}/bin/cvtpcre \
                -s 'word (?:[a-zA-Z0-9]+ ){0,300}otherword' \
                -s 'Z*(|d*){216}' \
                -s 'X?(R||){3335}' \
                -s '(|]+){2,2452}' \
                -s 'z{65536}' \
            < ${BUILD}/${PCRE_VER}/testdata/$i \
            > ${BUILD}/test/retest/$i.tst
        done
        # things which will probably never be relevant for us:
        rm ${BUILD}/test/retest/testinput2.tst # pcre options
        rm ${BUILD}/test/retest/testinput3.tst # locale
        rm ${BUILD}/test/retest/testinput5.tst # pcre options
        rm ${BUILD}/test/retest/testinput8.tst # pcre bytecode
        rm ${BUILD}/test/retest/testinput9.tst # character encodings
        rm ${BUILD}/test/retest/testinput10.tst # character encodings
        rm ${BUILD}/test/retest/testinput11.tst # character encodings
        rm ${BUILD}/test/retest/testinput12.tst # character encodings
        rm ${BUILD}/test/retest/testinput13.tst # character encodings
        rm ${BUILD}/test/retest/testinput15.tst # backtracking limits
        rm ${BUILD}/test/retest/testinput16.tst # JIT options
        rm ${BUILD}/test/retest/testinput17.tst # JIT options
        rm ${BUILD}/test/retest/testinput20.tst # serialisation
        rm ${BUILD}/test/retest/testinput21.tst # \C
        rm ${BUILD}/test/retest/testinput22.tst # \C
        rm ${BUILD}/test/retest/testinput23.tst # \C
        rm ${BUILD}/test/retest/testinputEBC.tst # EBCDIC
        # things we should eventually support, but don't yet:
        rm ${BUILD}/test/retest/testinput4.tst # we don't provide UTF8 yet
        rm ${BUILD}/test/retest/testinput7.tst # we don't provide UTF8 yet
        rm ${BUILD}/test/retest/testinput14.tst # we don't provide UTF8 yet
        rm ${BUILD}/test/retest/testinput18.tst # POSIX dialect
        rm ${BUILD}/test/retest/testinput19.tst # POSIX dialect
        rm ${BUILD}/test/retest/testinput24.tst # POSIX dialect
        rm ${BUILD}/test/retest/testinput25.tst # POSIX dialect

    - name: Run pcre test suite (vm v1)
      env:
        BUILD: ./build
      run: ${BUILD}/bin/retest -O1 -l vm -x v1 ${BUILD}/test/retest/*.tst

    - name: Run pcre test suite (vm v2)
      env:
        BUILD: ./build
      run: ${BUILD}/bin/retest -O1 -l vm -x v2 ${BUILD}/test/retest/*.tst

    - name: Run pcre test suite (asm)
      env:
        BUILD: ./build
      run: ${BUILD}/bin/retest -O1 -l asm ${BUILD}/test/retest/*.tst

    - name: Run pcre test suite (c)
      env:
        BUILD: ./build
      run: ${BUILD}/bin/retest -O1 -l c ${BUILD}/test/retest/*.tst

    - name: Run pcre test suite (vmc)
      env:
        BUILD: ./build
      run: ${BUILD}/bin/retest -O1 -l vmc ${BUILD}/test/retest/*.tst

  fpm:
    name: ${{ matrix.pkg }}
    runs-on: ${{ matrix.os }}-latest
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        # others: cpan, gem, npm, osxpkg, p5p, pacman, pear, pkgin, pleaserun, puppet, python, snap, solaris, virtualenv ]
        pkg: [ apk, deb, dir, freebsd, rpm, sh, tar, zip ]
        san: [ NO_SANITIZER ] # NO_SANITIZER=1 is a no-op
        os: [ ubuntu ]
        cc: [ clang ]
        make: [ bmake ]
        debug: [ RELEASE ] # RELEASE=1 is a no-op

    steps:
    - name: Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu'
      run: |
        uname -a
        sudo apt-get install bmake pcregrep
        sudo gem install --no-document fpm
        fpm -v
        ${{ matrix.cc }} --version

    - name: Fetch checkout
      uses: actions/cache@v3
      id: cache-checkout
      with:
        path: .
        key: ${{ github.sha }}

    - name: Fetch build
      uses: actions/cache@v3
      id: cache-build
      with:
        path: build
        key: ${{ matrix.make }}-${{ matrix.os }}-${{ matrix.cc }}-${{ matrix.debug }}-${{ matrix.san }}-${{ github.sha }}

    - name: Install
      run: |
        bmake -r -j 2 PKGCONF=pkg-config CC=${{ matrix.cc }} PREFIX=prefix/usr install

    - name: Package
      run: |
        mkdir pkg
        fpm -C prefix -p pkg/ -n libfsm -t ${{ matrix.pkg }} -v 0.${{ github.sha }} -m kate@elide.org -s dir

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.sha }} ${{ matrix.pkg }}
        path: pkg/* # single file here (because this is a matrix build), name format differs per package type

