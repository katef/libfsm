<?xml version="1.0"?>

<!--
	Copyright 2008-2017 Katherine Flavel

	See LICENCE for the full copyright terms.
-->

<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [

	<!-- TODO: centralise to mdb -->
	<!ENTITY stdin.lit  "<literal>stdin</literal>">
	<!ENTITY stdout.lit "<literal>stdout</literal>">

	<!-- TODO: centralise to mdb -->
	<!ENTITY re.arg      "<replaceable>re</replaceable>">
	<!ENTITY file.arg    "<replaceable>file</replaceable>">
	<!ENTITY dialect.arg "<replaceable>dialect</replaceable>">
	<!ENTITY prefix.arg  "<replaceable>prefix</replaceable>">
	<!ENTITY group.arg   "<replaceable>group</replaceable>">
	<!ENTITY query.arg   "<replaceable>query</replaceable>">

	<!ENTITY r.opt "<option>-r</option>&nbsp;&dialect.arg;">
	<!ENTITY l.opt "<option>-l</option>&nbsp;&lang.arg;">
	<!ENTITY q.opt "<option>-q</option>&nbsp;&query.arg;">

	<!ENTITY a.opt "<option>-a</option>">
	<!ENTITY b.opt "<option>-b</option>">
	<!ENTITY c.opt "<option>-c</option>">
	<!ENTITY w.opt "<option>-w</option>">
	<!ENTITY X.opt "<option>-X</option>">
	<!ENTITY e.opt "<option>-e</option>&nbsp;&prefix.arg;">

	<!ENTITY a.opt "<option>-a</option>">
	<!ENTITY d.opt "<option>-d</option>">
	<!ENTITY m.opt "<option>-m</option>">
	<!ENTITY n.opt "<option>-n</option>">
	<!ENTITY i.opt "<option>-i</option>">
	<!ENTITY p.opt "<option>-p</option>">
	<!ENTITY y.opt "<option>-y</option>">
	<!ENTITY z.opt "<option>-z</option>">
	<!ENTITY s.opt "<option>-s</option>">
	<!ENTITY u.opt "<option>-u</option>">
	<!ENTITY x.opt "<option>-x</option>">

	<!ENTITY h.opt "<option>-h</option>">
	<!ENTITY v.opt "<option>-v</option>">
]>

<refentry>
	<refentryinfo>
		<productname>re</productname>
	</refentryinfo>

	<refmeta>
		<refentrytitle>re</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>re</refname>
		<refpurpose>Construct Finite State Machines from Regular Expressions</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
<!--
TODO: re-do usage()
TODO: other than -h, six modes:
five modes:
exec (default)
validation
dump
example
group
query
-->

		<cmdsynopsis>
			<command>re</command>

			<arg choice="plain">&p.opt;</arg>

			<group>
				<arg choice="plain">&n.opt;</arg>
				<arg choice="plain">&b.opt;</arg>
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&u.opt;</arg>
				<arg choice="plain">&s.opt;</arg>
				<arg choice="plain">&y.opt;</arg>
				<arg choice="plain">&z.opt;</arg>
			</group>

			<arg choice="opt">&a.opt;</arg>
			<arg choice="opt">&c.opt;</arg>
			<arg choice="opt">&w.opt;</arg>
			<arg choice="opt">&X.opt;</arg>
			<arg choice="opt">&e.opt;</arg>

			<arg choice="opt">&l.opt;</arg>

			<sbr/>

			<arg choice="opt">&r.opt;</arg>

			<!-- TODO: rep here doesn't seem to work -->
			<arg choice="plain" rep="repeat">&re.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>re</command>

			<arg choice="plain">&m.opt;</arg>

			<group>
				<arg choice="plain">&n.opt;</arg>
				<arg choice="plain">&b.opt;</arg>
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&u.opt;</arg>
				<arg choice="plain">&s.opt;</arg>
				<arg choice="plain">&y.opt;</arg>
				<arg choice="plain">&z.opt;</arg>
			</group>

			<sbr/>

			<arg choice="opt">&r.opt;</arg>

			<arg choice="plain" rep="repeat">&re.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>re</command>

			<arg choice="opt">&x.opt;</arg>

			<group>
				<arg choice="plain">&n.opt;</arg>
				<arg choice="plain">&b.opt;</arg>
				<arg choice="plain">&i.opt;</arg>
				<arg choice="plain">&u.opt;</arg>
				<arg choice="plain">&s.opt;</arg>
				<arg choice="plain">&y.opt;</arg>
				<arg choice="plain">&z.opt;</arg>
			</group>

			<sbr/>

			<arg choice="opt">&r.opt;</arg>

			<arg choice="plain" rep="repeat">&re.arg;</arg>

			<group>
				<arg choice="plain">&text.arg;</arg>
<!-- XXX: the double hyphen should be a separate <arg> -->
				<arg choice="plain">
					<arg choice="plain"><literal>--</literal></arg>
					<arg choice="plain" rep="repeat">&text.arg;</arg>
				</arg>
			</group>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>re</command>

			<group choice="req">
				<arg choice="plain">&h.opt;</arg>
<!-- TODO: does re(1) have -v?
				<arg choice="plain">&v.opt;</arg>
-->
			</group>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>&re.1; is a command line tool to define
			<firstterm>Regular Expressions</firstterm>,
			which are &ldquo;executed&rdquo; to match against input strings,
			or used to provide example strings which would match when given as input.</para>

		<para>The &re.1; tool constructs a Finite State Machine
			from Regular Expression syntax.
<!--
			The constructed &fsm; may be output in various languages,
			e.g. in &fsm.5; format, to be manipulated by &fsm.1;.
-->
			The &fsm; is constructed by joining &nfa; fragments,
			and minimised to its canonical &dfa; by default.
			The &nfa; may be preserved by the &n.opt; option.</para>

		<para>multiple regexps may be given; these are unioned by default,
			or concatenated when the &s.opt; option is given.</para>

		<para>&re.1; is invoked in one of four modes of operation:
			&p.opt; to print the constructed &fsm;,
			&m.opt; to print example strings,
			and the default is to execute regular expressions.
			These modes are mutually exclusive.</para>
<!--
-i for files rather than patterns
regexp dialect specified by &r.opt;
-->

<para>
XXX: when executing,
strings are single or multiple with --.
can't we feed a string to stdin, too?
XXX: now with -x instead: Unlike &grep.1;, strings are matched from
command line arguments rather than &stdin.lit;.
TODO: with no strings to match, will just validate fsm instead.
validate is the wrong word
</para>

<para>XXX: Groups
group (for dialects which have them) (rather than a "whole" regexp)
</para>

		<para>This tool provides an interface to the &re.3; &api;.</para>
	</refsection>

	<refsection>
		<title>Options</title>

		<variablelist>
			<varlistentry>
				<term>&a.opt;</term>

				<listitem>
					<para>Number states,
						per the <code>anonymous_states</code> option for &fsm_print.3;.
						The default is to anonymise states,
						which is the opposite to the equivalent &a.opt; option for &fsm.1;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&c.opt;</term>

				<listitem>
					<para>Consolidate edges,
						per the <code>consolidate_edges</code> option for &fsm_print.3;.
						The default is to output edges independently,
						which is the opposite to the equivalent &c.opt; option for &fsm.1;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&w.opt;</term>

				<listitem>
					<para>Output a fragment,
						per the <code>fragment</code> option for &fsm_print.3;.
						The default is to output a complete file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&X.opt;</term>

				<listitem>
					<para>Always encode byte values in hexadecimal,
						per the <code>always_hex</code> option for &fsm_print.3;.
						The default is to only use hex for non-printable characters.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&e.opt;</term>

				<listitem>
					<para>Set a prefix for output,
						per the <code>prefix</code> option for &fsm_print.3;.
						The default is to output with no prefix.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&q.opt;</term>

				<listitem>
					<para>Query the constructed &fsm;, rather than executing it.
						The given query is applied to each &fsm; as it is joined
						to the &fsm; being constructed.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&p.opt;</term>

				<listitem>
					<para>Print the constructed &fsm;, rather than executing it.
						The output language is specified by <option>-l</option>.</para>

					<para>The output options &a.opt;, &w.opt;, &c.opt; and <option>-e</option>
						are applicable only when invoked in print mode (&p.opt;);
						they are otherwise ignored.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&u.opt;</term>

				<listitem>
					<para>Allow ambiguities between regexps,
						such that multiple regexps may match the same text.
						The default is to error for ambiguities,
						requiring all regexps unioned to be non-overlapping.
						Formally, the requirement is that they are disjoint languages.
						Erroring for ambiguities applies after multiple regexps are joined,
						either by union or by concaternation (&s.opt;).</para>

					<para>&u.opt; is implied by &n.opt;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&s.opt;</term>

				<listitem>
					<para>When multiple regular expressions are specified,
						&s.opt; joins them by concatenation.
						The default is to join by union.
						See &fsm_concat.3; and &fsm_union.3; respectively.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&m.opt;</term>

				<listitem>
					<para>Print an example string which would be matched by the
						constructed &fsm;.
						Examples strings are generated by &fsm_example.3;,
						and are intended to be short and legible.
						Long examples are trunacted, which is indicated by
						a trailing <literal>...</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&l.opt;</term>

				<listitem>
					<para>Set the output language for printing by &p.opt;.
						See &fsm_lang.5fsm; for the supported language identifiers.
						The default is <literal>fsm</literal>.</para>

					<para>In addition to printing &fsm; per &fsm_lang.5fsm;,
						&re.1; can also print an &ast; for a regular expression's
						syntax. The &ast; is printed by specifying one of
						<literal>ast</literal> (graphviz &dot.lit; output),
						<literal>abnf</literal>,
						or <literal>tree</literal>.</para> <!-- TODO: explain more -->

					<para>An &ast; may also be printed to regular expression
						syntax, by specifying <literal>pcre</literal>.</para>
					<!-- TODO: document under re(3) when the API is exposed -->

					<para>When printing &ast; output, only a single regular
						expression may be given.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&b.opt;</term>

				<listitem>
					<para>Anchor regexps at the start and end,
						per the <literal>RE_ANCHORED</literal> flag for &re.3;.</para>

					<para>By default most patterns must be anchored using syntax
						for anchors, typically <code>^</code> and <code>$</code>.
						For some dialects (for example literal strings and globs),
						the <literal>RE_ANCHORED</literal> flag is always set,
						and for these dialects the &b.opt; flag has no effect.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&i.opt;</term>

				<listitem>
					<para>Make regexps case insensitive,
					per the <literal>RE_ICASE</literal> flag for &re.3;.
					The default is for regexps to be case sensitive.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&n.opt;</term>

				<listitem>
					<para>Preserve the constructed &nfa;,
						rather than converting to a &dfa;.</para>

					<para>The &n.opt; option is only relevant when printing,
						and is otherwise ignored.
						When in effect, the &n.opt; option also implies &a.opt;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&r.opt;</term>

				<listitem>
					<para>Set the dialect for regular expressions.
						See &re_dialect.5re; for the supported dialect identifiers.
						The default is <literal>native</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&z.opt;</term>

				<listitem>
					<para>Print the regexps responsible for each item of output.
						In example mode (&m.opt;), this is the set of regexps which match each example.
						In execute mode, this is the set of regexps which match each input string.
						When the &u.opt; option is present,
						multiple regexps may be associated with each item.</para>
				</listitem>
			</varlistentry>

<!-- TODO:

			<varlistentry>
				<term>&v.opt;</term>

				<listitem>
					<para>Causes &re.1; to print its version number.</para>
				</listitem>
			</varlistentry>
-->

			<varlistentry>
				<term>&h.opt;</term>

				<listitem>
					<para>Print command-line usage help.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&x.opt;</term>

				<listitem>
					<para>Treat arguments to execute as filenames rather than strings.
						The files contents are used as input for the constructed &fsm; instead.
						The default is for arguments to be used as literal strings.</para>

					<para>&x.opt; is only applicable in execute mode;
						it is otherwise ignored.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&y.opt;</term>

				<listitem>
					<para>The &y.opt; option specifies that regular expressions
						are given by filenames instead of strings on the command line.
						Each file contains a regular expression.</para>
<!-- TODO: each file could contain a list of regexps -->
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Exit Status</title>

		<para>Exits <literal>&gt;0</literal> if an error occurs,
			<literal>2</literal> specifically for unsupported regexp syntax,
			or <literal>0</literal> on success.</para>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&fsm.1;, &grep.1;, &fsm.3;, &re.3;,
			&pcre.3;,
			&fsm_concat.3;, &fsm_union.3;,
			&fsm_lang.5fsm;,
			&like.5re;, &literal.5re;, &glob.5re;, &native.5re;, &sql.5re;,
			&posix; &re_format.7;, Plan 9 &regexp.7;.</para>
	</refsection>
</refentry>

