<?xml version="1.0"?>

<!--
	Copyright 2008-2017 Katherine Flavel

	See LICENCE for the full copyright terms.
-->

<!DOCTYPE refentry SYSTEM "minidocbook.dtd" [

	<!-- TODO: centralise to mdb -->
	<!ENTITY stdin.lit  "<literal>stdin</literal>">
	<!ENTITY stdout.lit "<literal>stdout</literal>">

	<!-- TODO: centralise to mdb -->
	<!ENTITY prefix.arg "<replaceable>prefix</replaceable>">

<!-- XXX: normalise with naming for usage()
	<!ENTITY execution.lit "<literal>execution</literal>">
	<!ENTITY query.lit     "<literal>query</literal>">
-->
	<!ENTITY io.arg "<replaceable>io</replaceable>">
	<!ENTITY iterations.arg "<replaceable>iterations</replaceable>">
	<!ENTITY length.arg "<replaceable>length</replaceable>">

	<!ENTITY a.opt "<option>-a</option>">
	<!ENTITY w.opt "<option>-w</option>">
	<!ENTITY C.opt "<option>-C</option>">
	<!ENTITY c.opt "<option>-c</option>">
	<!ENTITY e.opt "<option>-e</option>&nbsp;&prefix.arg;">
	<!ENTITY E.opt "<option>-E</option>">
	<!ENTITY G.opt "<option>-G</option>&nbsp;&length.arg;">
	<!ENTITY k.opt "<option>-k</option>&nbsp;&io.arg;">
	<!ENTITY i.opt "<option>-i</option>&nbsp;&iterations.arg;">
	<!ENTITY X.opt "<option>-X</option>">

	<!ENTITY d.opt "<option>-d</option>">
	<!ENTITY l.opt "<option>-l</option>&nbsp;&lang.arg;">
	<!ENTITY m.opt "<option>-m</option>">
	<!ENTITY o.opt "<option>-o</option>&nbsp;&out-file.arg;">
	<!ENTITY p.opt "<option>-p</option>">
	<!ENTITY q.opt "<option>-q</option>&nbsp;&name.arg;">
	<!ENTITY r.opt "<option>-r</option>">
	<!ENTITY t.opt "<option>-t</option>&nbsp;&name.arg;">
	<!ENTITY x.opt "<option>-x</option>">

	<!ENTITY h.opt "<option>-h</option>">
	<!ENTITY v.opt "<option>-v</option>">

	<!ENTITY c.lit    "<literal>c</literal>">
	<!ENTITY dot.lit  "<literal>dot</literal>">
	<!ENTITY fsm.lit  "<literal>fsm</literal>">
	<!ENTITY ir.lit   "<literal>ir</literal>">
	<!ENTITY json.lit "<literal>json</literal>">
	<!ENTITY sh.lit   "<literal>sh</literal>">
]>

<refentry>
	<refentryinfo>
		<productname>fsm</productname>
	</refentryinfo>

	<refmeta>
		<refentrytitle>fsm</refentrytitle>
		<manvolnum>1</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>fsm</refname>
		<refpurpose>Define and manipulate Finite State Machines</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<cmdsynopsis>
			<command>fsm</command>

			<arg choice="opt">&x.opt;</arg>

			<arg choice="plain" rep="repeat">&str.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>fsm</command>

			<arg choice="plain">&p.opt;</arg>

			<arg choice="opt">&l.opt;</arg>
			<arg choice="opt">&a.opt;</arg>
			<arg choice="opt">&C.opt;</arg>
			<arg choice="opt">&c.opt;</arg>
			<arg choice="opt">&w.opt;</arg>
			<arg choice="opt">&X.opt;</arg>
			<arg choice="opt">&e.opt;</arg>
			<arg choice="opt">&k.opt;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>fsm</command>

			<group>
				<arg choice="plain">&d.opt;</arg>
				<arg choice="plain">&m.opt;</arg>
				<arg choice="plain">&r.opt;</arg>
				<arg choice="plain">&t.opt;</arg>
			</group>

			<arg choice="opt">&i.opt;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>fsm</command>

			<arg choice="req" rep="repeat">&q.opt;</arg>

			<arg choice="plain" rep="repeat">&file.arg;</arg>
		</cmdsynopsis>

		<cmdsynopsis>
			<command>fsm</command>

			<group choice="req">
				<arg choice="plain">&h.opt;</arg>
<!--
				<arg choice="plain">&v.opt;</arg>
-->
			</group>
		</cmdsynopsis>
	</refsynopsisdiv>

	<refsection>
		<title>Description</title>

		<para>&fsm.1; is a command line tool to define and manipulate
			<firstterm>Finite State Machines</firstterm>.
			It exposes the functionality provided by the &fsm.3; &api;.</para>

		<para>Finite State Machines are defined using the &fsm.5; syntax,
			which is read from &stdin.lit;.
			Various transformations may be applied to the &fsm;.
			Output is written to &stdout.lit;.</para>

		<para>&fsm.1; is invoked in one of four modes of operation:
			&p.opt; to print an &fsm;,
			&t.opt; to transform an &fsm;,
			&q.opt; to query various properties of an &fsm;,
			and the default is to execute an &fsm;.
			These modes are mutually exclusive.</para>

		<para>Execution matches against input from arguments,
			which are used as literal strings by default,
			and filenames when &x.opt; is given.
			If no arguments are given, &fsm.1; constructs the &fsm;
			as usual, and exits with no action.
			This can be used to effectively validate a <literal>.fsm</literal> file.</para>
	</refsection>

	<refsection>
		<title>Options</title>

		<variablelist>
			<varlistentry>
				<term>&a.opt;</term>

				<listitem>
					<para>Anonymise states,
						per the <code>anonymous_states</code> option for &fsm_print.3;.
						The default is to number states,
					which is the opposite to the equivalent &a.opt; option for &re.1;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&C.opt;</term>

				<listitem>
					<para>Disable comments in generated code,
						per the <code>comments</code> option for &fsm_print.3;.
						The default is to output comments.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&c.opt;</term>

				<listitem>
					<para>Consolidate edges,
						per the <code>consolidate_edges</code> option for &fsm_print.3;.
						The default is to output edges independently,
						which is the opposite to the equivalent &c.opt; option for &re.1;.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&w.opt;</term>

				<listitem>
					<para>Output a fragment,
						per the <code>fragment</code> option for &fsm_print.3;.
						The default is to output a complete file.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&X.opt;</term>

				<listitem>
					<para>Always encode byte values in hexadecimal,
						per the <code>always_hex</code> option for &fsm_print.3;.
						The default is to only use hex for non-printable characters.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&e.opt;</term>

				<listitem>
					<para>Set a prefix for output,
						per the <code>prefix</code> option for &fsm_print.3;.
						The default is to output with no prefix.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&k.opt;</term>

<!-- TODO:
						per the <code>io</code> option for &fsm_print.3;.
				<listitem>
				</listitem>
-->
			</varlistentry>

			<varlistentry>
				<term>&i.opt;</term>

				<listitem>
					<para>Iterate a given number of times when applying a
						transformation per <option>-t</option>.
						The time taken for each iteration is printed to &stdout.lit;.
						Times are given in milliseconds.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&p.opt;</term>

				<listitem>
					<para>Print the constructed &fsm;, rather than executing it.
						The output language is specified by <option>-l</option>.</para>

					<para>The output options &a.opt;, &w.opt;, &c.opt; and <option>-e</option>
						are applicable only when invoked in print mode (&p.opt;);
						they are otherwise ignored.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&l.opt;</term>

				<listitem>
					<para>Set the output language for printing by &p.opt;.
						See &fsm_lang.5fsm; for the supported language identifiers.
						The default is <literal>fsm</literal>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&d.opt;</term>

				<listitem>
					<para>Equivalent to <code>-t&nbsp;determinise</code>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&E.opt;</term>

				<listitem>
					<para>Equivalent to <code>-t&nbsp;remove_epsilons</code>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&G.opt;</term>

				<listitem>
					<para>Print example matching inputs up to a maximum length.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&m.opt;</term>

				<listitem>
					<para>Equivalent to <code>-t&nbsp;minimise</code>.</para> <!-- TODO: markup -->
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&r.opt;</term>

				<listitem>
					<para>Equivalent to <code>-t&nbsp;reverse</code>.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&t.opt;</term>

				<listitem>
					<para>Apply a transformation.
						Multiple transformations may be given,
						and are applied in the order given.
						The available transformations are:</para>

					<table>
						<col align="left"/>
						<col align="left"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Name</th>
								<th>&api;</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>complete</code></td>
								<td>&fsm_complete.3;</td>
								<td>Make the &fsm; &complete.term;.
									If the &fsm; is already complete, then this is a no-op.</td>
							</tr>
							<tr>
								<td><code>complement</code></td>
								<td rowspan="2">&fsm_complement.3;</td>
								<td rowspan="2">&complement.term; the &fsm;.
									Complementing twice gives the original &fsm;.</td>
							</tr>
							<tr>
								<td><code>invert</code></td>
							</tr>
							<tr>
								<td><code>reverse</code></td>
								<td rowspan="2">&fsm_reverse.3;</td>
								<td rowspan="2">&reverse.term; the &fsm;.
									Reversing twice gives the original &fsm;.</td>
							</tr>
							<tr>
								<td><code>rev</code></td>
							</tr>
							<tr>
								<td><code>determinise</code></td>
								<td rowspan="2">&fsm_determinise.3;</td>
								<td rowspan="2">Make the &fsm; &deterministic.term;.
									That is, transform it to a &dfa;.
									If the &fsm; is already a &dfa;, then this is a no-op.</td>
							</tr>
							<tr>
								<td><code>dfa</code></td>
							</tr>
							<tr>
								<td><code>remove_epsilons</code></td>
								<td>&fsm_remove_epsilons.3;</td>
								<td>Eliminate epsilon transitions from the &fsm;.</td>
							</tr>
							<tr>
								<td><code>minimise</code></td>
								<td rowspan="2">&fsm_minimise.3;</td>
								<td rowspan="2">Make the &fsm; &minimal.term;.
									That is, transform it to a canonical state-minimal &dfa;.
									If the &fsm; is already minimal, then this is a no-op.</td>
							</tr>
							<tr>
								<td><code>min</code></td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&q.opt;</term>

				<listitem>
					<para>Query various properties of the &fsm; rather than executing it.
						A query gives a boolean result.
						Multiple queries may be given,
						and their results are <firstterm>and</firstterm>ed together.
						The result is returned as the exit status.</para>

					<table>
						<col align="left"/>
						<col align="left"/>
						<col align="left"/>

						<thead>
							<tr>
								<th>Name</th>
								<th>&api;</th>
								<th>Description</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td><code>isdfa</code></td>
								<td rowspan="2">&fsm_isdfa.3;</td>
								<td rowspan="2">True if the &fsm;
									is &deterministic.term;.</td>
							</tr>
							<tr>
								<td><code>dfa</code></td>
							</tr>
							<tr>
								<td><code>iscomplete</code></td>
								<td>&fsm_iscomplete.3;</td>
								<td>True if the &fsm; is &complete.term;.</td>
							</tr>
							<tr>
								<td><code>hasend</code></td>
								<td rowspan="4">&fsm_hasend.3;</td>
								<td rowspan="4">True if the &fsm;
									has at least one &final.term; state.</td>
							</tr>
							<tr>
								<td><code>end</code></td>
							</tr>
							<tr>
								<td><code>hasaccept</code></td>
							</tr>
							<tr>
								<td><code>accept</code></td>
							</tr>
							<tr>
								<td><code>hasnondeterminism</code></td>
								<td rowspan="2">&fsm_hasnondeterminism.3;</td>
								<td rowspan="2">True if the &fsm;
									has one or more transitions labelled with the same
									symbol, reachable from the same state.</td>
							</tr>
							<tr>
								<td><code>epsilons</code></td>
							</tr>
							<tr>
								<td><code>hasepsilons</code></td>
								<td rowspan="2">&fsm_hasepsilons.3;</td>
								<td rowspan="2">True if the &fsm;
									has one or more epsilon transitions.</td>
							</tr>
							<tr>
								<td><code>epsilons</code></td>
							</tr>
							<tr>
								<td><code>count</code></td>
								<td rowspan="1">&fsm_countstates.3;</td>
								<td rowspan="1">Count of the number of states in the &fsm;.
									Printed to &stdout.lit;; exit status is always true.</td>
							</tr>
							<tr>
								<td><code>epsilonclosure</code></td>
								<td rowspan="1" role="na">&ndash;</td>
								<td rowspan="1">Compute the <newterm>epsilon closure</newterm>
									of each state in the &fsm;.
									Printed to &stdout.lit;; exit status is always true.</td>
							</tr>
						</tbody>
					</table>
				</listitem>
			</varlistentry>

<!-- TODO:
			<varlistentry>
				<term>&v.opt;</term>

				<listitem>
					<para>Causes &fsm.1; to print its version number.</para>
				</listitem>
			</varlistentry>
-->

			<varlistentry>
				<term>&h.opt;</term>

				<listitem>
					<para>Print command-line usage help.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>&x.opt;</term>

				<listitem>
					<para>Treat arguments to execute as filenames rather than strings.
						The files contents are used as input for the &fsm; instead.
						The default is for arguments to be used as literal strings.</para>

					<para>&x.opt; is only applicable in execute mode;
						it is otherwise ignored.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>

	<refsection>
		<title>Exit Status</title>

		<para>Exits <literal>0</literal> on success,
			or non-zero if an error occurs.
			In query mode, the result of the query is returned;
			<literal>0</literal> if the query is true,
			and non-zero otherwise.</para>
	</refsection>

	<refsection>
		<title>See Also</title>

		<para>&re.1;, &fsm.3;.</para>
	</refsection>
</refentry>

